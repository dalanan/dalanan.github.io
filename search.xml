<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo备忘</title>
      <link href="/2022/12/19/hexo%E5%A4%87%E5%BF%98/"/>
      <url>/2022/12/19/hexo%E5%A4%87%E5%BF%98/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! </p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可以在命令中指定文章的布局（layout），不指定默认为 post，也可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。创建的新文章会自动加上指定布局对应的模板文件中的内容。</p></blockquote><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><blockquote><p>hexo-server模块的主要命令，输入命令以启动服务器，您的网站会在 <a href="http://localhost:4000/">http://localhost:4000</a> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p></blockquote><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><blockquote><p>首先执行命令生成相应的静态网页，生成的静态网页以及相关资源都会在public目录下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br><span class="line">$ hexo s -p 5000</span><br></pre></td></tr></table></figure><blockquote><p>如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口。</p></blockquote><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><blockquote><p>通过hexo g命令生成的都是静态网页，可以把生成的public目录中的文件，全都拷贝到网站根目录，部署。</p></blockquote><h3 id="Clear-cache-files"><a href="#Clear-cache-files" class="headerlink" title="Clear cache files"></a>Clear cache files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><blockquote><p>上述命令会清除本地站点文件夹下的缓存文件（db.json）和已有的静态文件（public）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String.format简单用法</title>
      <link href="/2022/12/12/String.format%20%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
      <url>/2022/12/12/String.format%20%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-format简单用法"><a href="#Spring-format简单用法" class="headerlink" title="Spring.format简单用法"></a>Spring.format简单用法</h1><h2 id="转换符"><a href="#转换符" class="headerlink" title="转换符"></a>转换符</h2><ul><li>%s：字符串类型</li><li>%c：字符类型</li><li>%b：布尔类型</li><li>整数类型<ul><li>%d：十进制整数</li><li>%x：十六进制整数</li><li>%o：八进制整数</li><li></li></ul></li><li>浮点类型<ul><li>%f：十进制浮点数</li><li>%a：十六进制浮点数</li><li>%g：通用浮点数：比%f，%a长度更短的一种格式输出，显示6位有效数字，而且会进行四舍五入</li></ul></li><li>%e：指数形式</li><li>%%：百分比类型</li><li>%n：换行符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// %s %c</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;Hello %s%c&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&#x27;!&#x27;</span>)) <span class="comment">// Hello world!</span></span><br><span class="line">    <span class="comment">// %b</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%b&quot;</span>, <span class="number">10</span>&gt;<span class="number">3</span>)); <span class="comment">// </span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%b&quot;</span>, <span class="number">2</span>&gt;=<span class="number">3</span>)); <span class="comment">// </span></span><br><span class="line">    <span class="comment">// %d %x %o</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;十进制：%d&quot;</span>, <span class="number">10</span>)); <span class="comment">// 十进制：10</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;十六进制：%x&quot;</span>, <span class="number">10</span>)); <span class="comment">// 十六进制：a</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;八进制：%o&quot;</span>, <span class="number">10</span>)); <span class="comment">// 八进制：12</span></span><br><span class="line">    <span class="comment">// %f %a %g %e</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;浮点数：%f&quot;</span>, <span class="number">3.14159</span>)); <span class="comment">// 浮点数：3.141590</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;十六进制浮点数：%a&quot;</span>, <span class="number">3.14159</span>)); <span class="comment">// 0x1.921f9f01b866ep1</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;通用浮点类型：%g&quot;</span>, <span class="number">3.1415926</span>)); <span class="comment">// 3.14159</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;指数形式：%e&quot;</span>, <span class="number">3.14159</span>)); <span class="comment">// 3.141590e+00</span></span><br><span class="line">    <span class="comment">// %h %% %n</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;散列码：%h&quot;</span>, <span class="string">&quot;123456&quot;</span>)); <span class="comment">// 散列码：56760663</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;百分之九十：%d%%&quot;</span>, <span class="number">90</span>)); <span class="comment">// 90%</span></span><br><span class="line">System.out.println(String.format(<span class="string">&quot;测试到此结束！%n&quot;</span>)); <span class="comment">// 换行</span></span><br></pre></td></tr></table></figure><h2 id="常用标识"><a href="#常用标识" class="headerlink" title="常用标识"></a>常用标识</h2><ul><li>+：使得正数表示出正号；负数加不加无所谓，都可以表示出负号；</li><li>-：左对齐，不够位数的地方补上空格；</li><li>0：在数字位数不够的地方补上0</li><li>空格：在位数不够的地方补上空格；</li><li>,：对数字分组，三位一隔，只可用于十进制；</li><li>(：使用括号将去掉负号的负数包含进来；</li><li>#：让十六禁止的数字加上ox，八进制的数字加上o；辅助%x和%o的使用，相当于一种对数字进制的补充说明提示；</li><li>&lt;：格式化前一个转换符所描述的参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//+号的用法</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;数字的正负表示：%+d %d %+d %d&quot;</span>,<span class="number">8</span>,<span class="number">8</span>,-<span class="number">8</span>,-<span class="number">8</span>)); <span class="comment">// 数字的正负表示：+8 8 -8 -8</span></span><br><span class="line">    <span class="comment">//-的用法</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;左对齐：%-6d&quot;</span>,<span class="number">8</span>)); <span class="comment">// 左对齐：8</span></span><br><span class="line">    <span class="comment">//0的用法</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;缺位补零：%06d&quot;</span>,<span class="number">8</span>)); <span class="comment">// 缺位补零：000008</span></span><br><span class="line">    <span class="comment">//&#x27; &#x27;空格的用法</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;缺位补空格：% 6d&quot;</span>,<span class="number">8</span>)); <span class="comment">// 缺位补空格：     8</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;缺位补空格：% 6d&quot;</span>,-<span class="number">8</span>)); <span class="comment">// 缺位补空格：    -8</span></span><br><span class="line">    <span class="comment">//,的用法</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;数字分组：%,d&quot;</span>,<span class="number">123456789</span>)); <span class="comment">// 数字分组：123,456,789</span></span><br><span class="line">    <span class="comment">//(的用法</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;括号用法：%(d&quot;</span>,-<span class="number">8888</span>)); <span class="comment">// 括号用法：(8888)</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;括号用法：%(d&quot;</span>,<span class="number">8888</span>)); <span class="comment">// 括号用法：8888</span></span><br><span class="line">    <span class="comment">//#的用法</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;#括号用法(十六进制)：%#x&quot;</span>,<span class="number">12</span>)); <span class="comment">// #括号用法(十六进制)：0xc</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;#括号用法(八进制)：%#o&quot;</span>,<span class="number">12</span>)); <span class="comment">// #括号用法(八进制)：014</span></span><br><span class="line">    <span class="comment">//&lt;的用法</span></span><br><span class="line">    <span class="comment">//&quot;%&lt;3.1f&quot;作用的对象是前一个&quot;%f&quot;所作用的对象</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;&lt;括号用法：%f %&lt;3.1f&quot;</span>,<span class="number">3.14</span>,<span class="number">3.2</span>)); <span class="comment">// &lt;括号用法：3.140000 3.1</span></span><br></pre></td></tr></table></figure><h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><ul><li><strong>%tc：包括全部日期和时间信息</strong></li><li>%te：一月中的某天</li><li>%tb：指定语言环境的月份简称</li><li>%tB：指定语言环境的月份全称</li><li>%ta：指定语言环境的星期几简称</li><li>%tA：指定语言环境的星期几全称</li><li>%ty：两位年份</li><li>%tY：四位年份</li><li>%tj：一年中的第几天（001~366）</li><li>%tm：月份</li><li>%td：一月中的第几天（01~31）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">today</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    System.out.println(String.format(Locale.US, <span class="string">&quot;%tb&quot;</span>,today)); <span class="comment">// Dec</span></span><br><span class="line">    System.out.println(String.format(Locale.US, <span class="string">&quot;%tB&quot;</span>, today)); <span class="comment">// December</span></span><br><span class="line">    System.out.println(String.format(Locale.CHINA, <span class="string">&quot;%tB&quot;</span>, today)); <span class="comment">// 十二月</span></span><br><span class="line">    System.out.println(String.format(Locale.US,<span class="string">&quot;%ta&quot;</span>, today)); <span class="comment">// Tue</span></span><br><span class="line">    System.out.println(String.format(Locale.US,<span class="string">&quot;%tA&quot;</span>, today)); <span class="comment">// Tuesday</span></span><br><span class="line">System.out.println(String.format(Locale.CHINA,<span class="string">&quot;%tA&quot;</span>, today)); <span class="comment">//  星期二</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tY&quot;</span>, today)); <span class="comment">// 2022</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%ty&quot;</span>, today)); <span class="comment">// 22</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tj&quot;</span>, today)); <span class="comment">// 347</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tm&quot;</span>, today)); <span class="comment">// 12</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%td&quot;</span>, today)); <span class="comment">// 13</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%te&quot;</span>, today)); <span class="comment">// 13</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tc&quot;</span>, today)); <span class="comment">// 周二 12月 13 10:28:58 CST 2022</span></span><br></pre></td></tr></table></figure><h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><ul><li>%tH：24小时制小时数（00~23）</li><li>%tI：12小时制小时数（01~12）</li><li>%tk：24小时制小时数（0~23）</li><li>%tl：12小时制小时数（1~12）</li><li>%tM：分（00~59）</li><li>%tS：秒（00~60）</li><li>%tL：毫秒（000~999）</li><li>%tN：微秒（000 000 000~999 999 999）</li><li>%tp：指定语言环境的上午或下午</li><li>%tz：相对于GMT RFC 82 格式的数字时区偏移量</li><li>%tZ：时区缩写形式字符串</li><li>%ts：1970-01-01 00:00:00至现在经过的秒数</li><li>%tQ：1970-01-01 00:00:00至现在经过的毫秒数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(String.format(<span class="string">&quot;%tH&quot;</span>, today)); <span class="comment">// 15</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tI&quot;</span>, today)); <span class="comment">// 03</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tk&quot;</span>, today)); <span class="comment">// 15</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tl&quot;</span>, today)); <span class="comment">// 3</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tM&quot;</span>, today)); <span class="comment">// 38</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tS&quot;</span>, today)); <span class="comment">// 17</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tL&quot;</span>, today)); <span class="comment">// 907</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tN&quot;</span>, today)); <span class="comment">// 907000000</span></span><br><span class="line">    System.out.println(String.format(Locale.US, <span class="string">&quot;%tp&quot;</span>, today)); <span class="comment">// am</span></span><br><span class="line">    System.out.println(String.format(Locale.CHINA, <span class="string">&quot;%tp&quot;</span>, today)); <span class="comment">// 上午</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tz&quot;</span>, today)); <span class="comment">// +0800</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tZ&quot;</span>, today)); <span class="comment">// CST</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%ts&quot;</span>, today)); <span class="comment">// 1670899097</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tQ&quot;</span>, today)); <span class="comment">// 1670899097907</span></span><br></pre></td></tr></table></figure><h2 id="日期时间组合格式化"><a href="#日期时间组合格式化" class="headerlink" title="日期时间组合格式化"></a>日期时间组合格式化</h2><ul><li>%tF：年-月-日</li><li>%tD：月&#x2F;日&#x2F;年</li><li>%tc：全部日期和时间信息</li><li>%tr：时:分:秒 AM(上午) &#x2F;&#x2F;12小时制</li><li>%tT：时:分:秒 &#x2F;&#x2F;24小时制</li><li>%tR：时:分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(String.format(<span class="string">&quot;%tF&quot;</span>, today)); <span class="comment">// 2022-12-13</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tD&quot;</span>, today)); <span class="comment">// 12/13/22</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tc&quot;</span>, today)); <span class="comment">// 周二 12月 13 10:46:09 CST 2022</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tr&quot;</span>, today)); <span class="comment">// 10:46:09 上午</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tT&quot;</span>, today)); <span class="comment">// 10:46:09</span></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%tR&quot;</span>, today)); <span class="comment">// 10:46</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok注解</title>
      <link href="/2022/11/29/Lombok%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/11/29/Lombok%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Slf4j"><a href="#Slf4j" class="headerlink" title="@Slf4j"></a>@Slf4j</h2><p>Java Web中有很多日志框架，如:logback、log4j、log4j2等。<br>为了兼容这些框架，使用了门面模式进行抽象，这就是slf4j的api标准。用户无需关心底层是什么日志框架，只需要获取Logger对象即可。<br>在类上标注@Slf4j，即可使用log.info()等方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogTest</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="EqualsAndHashCode-ToString"><a href="#EqualsAndHashCode-ToString" class="headerlink" title="@EqualsAndHashCode|@ToString"></a>@EqualsAndHashCode|@ToString</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(of = &#123;&quot;name&quot;, &quot;sex&quot;&#125;)</span> <span class="comment">//指定哪些字段参与equals hashcode</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ToString(of = &#123;&quot;name&quot;, &quot;sex&quot;&#125;)</span> <span class="comment">//toString可以配置字段</span></span><br></pre></td></tr></table></figure><h2 id="NoArgsConstructor-AllArgsConstructor"><a href="#NoArgsConstructor-AllArgsConstructor" class="headerlink" title="@NoArgsConstructor|@AllArgsConstructor"></a>@NoArgsConstructor|@AllArgsConstructor</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor(access = AccessLevel.PRIVATE)</span> <span class="comment">//可以使用私有构造函数</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//全参构造</span></span><br></pre></td></tr></table></figure><h2 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h2><ul><li>get&#x2F;set</li><li>无参数构造器</li><li>toString</li><li>hashcode</li><li>equals</li></ul><h2 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> User &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singular</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; city;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> User.builder()</span><br><span class="line">                .name(<span class="string">&quot;tom&quot;</span>)</span><br><span class="line">                .age(<span class="number">21</span>)</span><br><span class="line">                .addcity(<span class="string">&quot;bj&quot;</span>)</span><br><span class="line">                .addcity(<span class="string">&quot;sh&quot;</span>)</span><br><span class="line">                .addcity(<span class="string">&quot;tj&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a>@Synchronized</h2><h2 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h2><p>资源回收，连接关闭</p><h2 id="Accessors"><a href="#Accessors" class="headerlink" title="@Accessors"></a>@Accessors</h2><ul><li>@Accessors(fluent &#x3D; true)<br>根据参数列表判断读或者写，也就是setter、getter方法</li><li>@Accessors(chain &#x3D; true)<br>set方法返回本身</li></ul><h2 id="FieldNameConstants"><a href="#FieldNameConstants" class="headerlink" title="@FieldNameConstants"></a>@FieldNameConstants</h2><p>某个类中有哪些字段，字段名是什么<br>通过Fields.name&#x2F;Fields.age读取name&#x2F;age </p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Lombok </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NginxProxyManager中文版</title>
      <link href="/2022/11/28/Nginx%20Proxy%20Manager%20%E4%B8%AD%E6%96%87/"/>
      <url>/2022/11/28/Nginx%20Proxy%20Manager%20%E4%B8%AD%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="NginxProxyManager"><a href="#NginxProxyManager" class="headerlink" title="NginxProxyManager"></a>NginxProxyManager</h1><h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><p>安装Docker和Docker-compose</p><ul><li><a href="https://docs.docker.com/install/">Docker官方安装文档（英文）</a></li><li><a href="https://docs.docker.com/compose/install/">Docker-Compose官方安装文档（英文）</a></li><li><strong><a href="https://blog.csdn.net/zhangzejin3883/article/details/124778945">Docker和Docker-compose安装文档（中文）</a></strong></li></ul><h2 id="创建YAML文件"><a href="#创建YAML文件" class="headerlink" title="创建YAML文件"></a>创建YAML文件</h2><p>创建一个 <code>docker-compose.yml</code> 文件:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;chishin/nginx-proxy-manager-zh:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;81:81&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span></span><br></pre></td></tr></table></figure><h2 id="部署运行"><a href="#部署运行" class="headerlink" title="部署运行"></a>部署运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="登录管理页面"><a href="#登录管理页面" class="headerlink" title="登录管理页面"></a>登录管理页面</h2><p>当你的docker容器成功运行，使用浏览器访问<code>81</code>端口。<br>有些时候需要稍等一段时间。</p><p><a href="http://127.0.0.1:81/">http://127.0.0.1:81</a></p><p>默认管理员信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Email:    admin@example.com</span><br><span class="line">Password: changeme</span><br></pre></td></tr></table></figure><p>使用这个默认用户登录后，系统会立即要求您修改详细信息和密码。</p><h2 id="快速升级"><a href="#快速升级" class="headerlink" title="快速升级"></a>快速升级</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br><span class="line">docker-compose pull</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>这个项目将自动更新任何数据库或其他要求，所以你不必遵循任何疯狂的指示。上面的这些步骤将提取最新的更新并重新创建docker容器。</p><blockquote><p>本文章转自<a href="https://github.com/xiaoxinpro/nginx-proxy-manager-zh">https://github.com/xiaoxinpro/nginx-proxy-manager-zh</a>, 只为做个记录, 防止丢失, 欢迎star，感谢！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
          <category> NginxProxyManager </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring常用工具类</title>
      <link href="/2022/07/14/Spring%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2022/07/14/Spring%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="对象、数组、集合"><a href="#对象、数组、集合" class="headerlink" title="对象、数组、集合"></a>对象、数组、集合</h1><h2 id="ObjectUtils"><a href="#ObjectUtils" class="headerlink" title="ObjectUtils"></a>ObjectUtils</h2><h3 id="获取对象的基本信息"><a href="#获取对象的基本信息" class="headerlink" title="获取对象的基本信息"></a>获取对象的基本信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取对象的类名。参数为 null 时，返回字符串：&quot;null&quot;</span></span><br><span class="line">String <span class="title function_">nullSafeClassName</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 参数为 null 时，返回 0</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nullSafeHashCode</span><span class="params">(Object object)</span></span><br><span class="line"><span class="comment">// 参数为 null 时，返回字符串：&quot;null&quot;</span></span><br><span class="line">String <span class="title function_">nullSafeToString</span><span class="params">(<span class="type">boolean</span>[] array)</span></span><br><span class="line"><span class="comment">// 获取对象 HashCode（十六进制形式字符串）。参数为 null 时，返回 0</span></span><br><span class="line">String <span class="title function_">getIdentityHexString</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 获取对象的类名和 HashCode。参数为 null 时，返回字符串：&quot;&quot;</span></span><br><span class="line">String <span class="title function_">identityToString</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 相当于 toString()方法，但参数为 null 时，返回字符串：&quot;&quot;</span></span><br><span class="line">String <span class="title function_">getDisplayString</span><span class="params">(Object obj)</span></span><br></pre></td></tr></table></figure><h3 id="判断工具"><a href="#判断工具" class="headerlink" title="判断工具"></a>判断工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断数组是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object[] array)</span></span><br><span class="line"><span class="comment">// 判断参数对象是否是数组</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isArray</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 判断数组中是否包含指定元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsElement</span><span class="params">(Object[] array, Object element)</span></span><br><span class="line"><span class="comment">// 相等，或同为 null时，返回 true</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">nullSafeEquals</span><span class="params">(Object o1, Object o2)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">判断参数对象是否为空，判断标准为：</span></span><br><span class="line"><span class="comment">    Optional: Optional.empty()</span></span><br><span class="line"><span class="comment">       Array: length == 0</span></span><br><span class="line"><span class="comment">CharSequence: length == 0</span></span><br><span class="line"><span class="comment">  Collection: Collection.isEmpty()</span></span><br><span class="line"><span class="comment">         Map: Map.isEmpty()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object obj)</span></span><br></pre></td></tr></table></figure><h3 id="其他工具方法"><a href="#其他工具方法" class="headerlink" title="其他工具方法"></a>其他工具方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向参数数组的末尾追加新元素，并返回一个新数组</span></span><br><span class="line">&lt;A, O <span class="keyword">extends</span> <span class="title class_">A</span>&gt; A[] addObjectToArray(A[] array, O obj)</span><br><span class="line"><span class="comment">// 原生基础类型数组 --&gt; 包装类数组</span></span><br><span class="line">Object[] toObjectArray(Object source)</span><br></pre></td></tr></table></figure><h2 id="StringUtils"><a href="#StringUtils" class="headerlink" title="StringUtils"></a>StringUtils</h2><h3 id="字符串判断工具"><a href="#字符串判断工具" class="headerlink" title="字符串判断工具"></a>字符串判断工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否为 null，或 &quot;&quot;。注意，包含空白符的字符串为非空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object str)</span></span><br><span class="line"><span class="comment">// 判断字符串是否是以指定内容结束。忽略大小写</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">endsWithIgnoreCase</span><span class="params">(String str, String suffix)</span></span><br><span class="line"><span class="comment">// 判断字符串是否已指定内容开头。忽略大小写</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">startsWithIgnoreCase</span><span class="params">(String str, String prefix)</span></span><br><span class="line"><span class="comment">// 是否包含空白符</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 判断字符串非空且长度不为 0，即，Not Empty</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasLength</span><span class="params">(CharSequence str)</span></span><br><span class="line"><span class="comment">// 判断字符串是否包含实际内容，即非仅包含空白符，也就是 Not Blank</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasText</span><span class="params">(CharSequence str)</span></span><br><span class="line"><span class="comment">// 判断字符串指定索引处是否包含一个子串。</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">substringMatch</span><span class="params">(CharSequence str, <span class="type">int</span> index, CharSequence substring)</span></span><br><span class="line"><span class="comment">// 计算一个字符串中指定子串的出现次数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">countOccurrencesOf</span><span class="params">(String str, String sub)</span></span><br></pre></td></tr></table></figure><h3 id="字符串操作工具"><a href="#字符串操作工具" class="headerlink" title="字符串操作工具"></a>字符串操作工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找并替换指定子串</span></span><br><span class="line">String <span class="title function_">replace</span><span class="params">(String inString, String oldPattern, String newPattern)</span></span><br><span class="line"><span class="comment">// 去除尾部的特定字符</span></span><br><span class="line">String <span class="title function_">trimTrailingCharacter</span><span class="params">(String str, <span class="type">char</span> trailingCharacter)</span> </span><br><span class="line"><span class="comment">// 去除头部的特定字符</span></span><br><span class="line">String <span class="title function_">trimLeadingCharacter</span><span class="params">(String str, <span class="type">char</span> leadingCharacter)</span></span><br><span class="line"><span class="comment">// 去除头部的空白符</span></span><br><span class="line">String <span class="title function_">trimLeadingWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 去除头部的空白符</span></span><br><span class="line">String <span class="title function_">trimTrailingWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 去除头部和尾部的空白符</span></span><br><span class="line">String <span class="title function_">trimWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 删除开头、结尾和中间的空白符</span></span><br><span class="line">String <span class="title function_">trimAllWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 删除指定子串</span></span><br><span class="line">String <span class="title function_">delete</span><span class="params">(String inString, String pattern)</span></span><br><span class="line"><span class="comment">// 删除指定字符（可以是多个）</span></span><br><span class="line">String <span class="title function_">deleteAny</span><span class="params">(String inString, String charsToDelete)</span></span><br><span class="line"><span class="comment">// 对数组的每一项执行 trim() 方法</span></span><br><span class="line">String[] trimArrayElements(String[] array)</span><br><span class="line"><span class="comment">// 将 URL 字符串进行解码</span></span><br><span class="line">String <span class="title function_">uriDecode</span><span class="params">(String source, Charset charset)</span></span><br></pre></td></tr></table></figure><h3 id="路径相关工具方法"><a href="#路径相关工具方法" class="headerlink" title="路径相关工具方法"></a>路径相关工具方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析路径字符串，优化其中的 “..”</span></span><br><span class="line">String <span class="title function_">cleanPath</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 解析路径字符串，解析出文件名部分</span></span><br><span class="line">String <span class="title function_">getFilename</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 解析路径字符串，解析出文件后缀名</span></span><br><span class="line">String <span class="title function_">getFilenameExtension</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 比较两个两个字符串，判断是否是同一个路径。会自动处理路径中的 “..”</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">pathEquals</span><span class="params">(String path1, String path2)</span></span><br><span class="line"><span class="comment">// 删除文件路径名中的后缀部分</span></span><br><span class="line">String <span class="title function_">stripFilenameExtension</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 以 “. 作为分隔符，获取其最后一部分</span></span><br><span class="line">String <span class="title function_">unqualify</span><span class="params">(String qualifiedName)</span></span><br><span class="line"><span class="comment">// 以指定字符作为分隔符，获取其最后一部分</span></span><br><span class="line">String <span class="title function_">unqualify</span><span class="params">(String qualifiedName, <span class="type">char</span> separator)</span></span><br></pre></td></tr></table></figure><h2 id="CollectionUtils"><a href="#CollectionUtils" class="headerlink" title="CollectionUtils"></a>CollectionUtils</h2><h3 id="集合判断工具"><a href="#集合判断工具" class="headerlink" title="集合判断工具"></a>集合判断工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断 List/Set 是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Collection&lt;?&gt; collection)</span></span><br><span class="line"><span class="comment">// 判断 Map 是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Map&lt;?,?&gt; map)</span></span><br><span class="line"><span class="comment">// 判断 List/Set 中是否包含某个对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsInstance</span><span class="params">(Collection&lt;?&gt; collection, Object element)</span></span><br><span class="line"><span class="comment">// 以迭代器的方式，判断 List/Set 中是否包含某个对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Iterator&lt;?&gt; iterator, Object element)</span></span><br><span class="line"><span class="comment">// 判断 List/Set 是否包含某些对象中的任意一个</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsAny</span><span class="params">(Collection&lt;?&gt; source, Collection&lt;?&gt; candidates)</span></span><br><span class="line"><span class="comment">// 判断 List/Set 中的每个元素是否唯一。即 List/Set 中不存在重复元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasUniqueObject</span><span class="params">(Collection&lt;?&gt; collection)</span></span><br></pre></td></tr></table></figure><h3 id="集合操作工具"><a href="#集合操作工具" class="headerlink" title="集合操作工具"></a>集合操作工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 Array 中的元素都添加到 List/Set 中</span></span><br><span class="line">&lt;E&gt; <span class="keyword">void</span> <span class="title function_">mergeArrayIntoCollection</span><span class="params">(Object array, Collection&lt;E&gt; collection)</span> </span><br><span class="line"><span class="comment">// 将 Properties 中的键值对都添加到 Map 中</span></span><br><span class="line">&lt;K,V&gt; <span class="keyword">void</span> <span class="title function_">mergePropertiesIntoMap</span><span class="params">(Properties props, Map&lt;K,V&gt; map)</span></span><br><span class="line"><span class="comment">// 返回 List 中最后一个元素</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">lastElement</span><span class="params">(List&lt;T&gt; list)</span> </span><br><span class="line"><span class="comment">// 返回 Set 中最后一个元素</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">lastElement</span><span class="params">(Set&lt;T&gt; set)</span> </span><br><span class="line"><span class="comment">// 返回参数 candidates 中第一个存在于参数 source 中的元素</span></span><br><span class="line">&lt;E&gt; E <span class="title function_">findFirstMatch</span><span class="params">(Collection&lt;?&gt; source, Collection&lt;E&gt; candidates)</span></span><br><span class="line"><span class="comment">// 返回 List/Set 中指定类型的元素。</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">findValueOfType</span><span class="params">(Collection&lt;?&gt; collection, Class&lt;T&gt; type)</span></span><br><span class="line"><span class="comment">// 返回 List/Set 中指定类型的元素。如果第一种类型未找到，则查找第二种类型，以此类推</span></span><br><span class="line">Object <span class="title function_">findValueOfType</span><span class="params">(Collection&lt;?&gt; collection, Class&lt;?&gt;[] types)</span></span><br><span class="line"><span class="comment">// 返回 List/Set 中元素的类型</span></span><br><span class="line">Class&lt;?&gt; findCommonElementType(Collection&lt;?&gt; collection)</span><br></pre></td></tr></table></figure><h1 id="文件、资源、IO流"><a href="#文件、资源、IO流" class="headerlink" title="文件、资源、IO流"></a>文件、资源、IO流</h1><h2 id="FileCopyUtils"><a href="#FileCopyUtils" class="headerlink" title="FileCopyUtils"></a>FileCopyUtils</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从文件中读入到字节数组中</span></span><br><span class="line"><span class="type">byte</span>[] copyToByteArray(File in)</span><br><span class="line"><span class="comment">// 从输入流中读入到字节数组中</span></span><br><span class="line"><span class="type">byte</span>[] copyToByteArray(InputStream in)</span><br><span class="line"><span class="comment">// 从输入流中读入到字符串中</span></span><br><span class="line">String <span class="title function_">copyToString</span><span class="params">(Reader in)</span></span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从字节数组到文件</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(<span class="type">byte</span>[] in, File out)</span></span><br><span class="line"><span class="comment">// 从文件到文件</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(File in, File out)</span></span><br><span class="line"><span class="comment">// 从字节数组到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(<span class="type">byte</span>[] in, OutputStream out)</span> </span><br><span class="line"><span class="comment">// 从输入流到输出流</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(InputStream in, OutputStream out)</span> </span><br><span class="line"><span class="comment">// 从输入流到输出流</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(Reader in, Writer out)</span></span><br><span class="line"><span class="comment">// 从字符串到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(String in, Writer out)</span></span><br></pre></td></tr></table></figure><h2 id="ResourceUtils"><a href="#ResourceUtils" class="headerlink" title="ResourceUtils"></a>ResourceUtils</h2><h3 id="从资源路径获取文件"><a href="#从资源路径获取文件" class="headerlink" title="从资源路径获取文件"></a>从资源路径获取文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否是一个合法的 URL 字符串。</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isUrl</span><span class="params">(String resourceLocation)</span></span><br><span class="line"><span class="comment">// 获取 URL</span></span><br><span class="line"><span class="keyword">static</span> URL <span class="title function_">getURL</span><span class="params">(String resourceLocation)</span> </span><br><span class="line"><span class="comment">// 获取文件（在 JAR 包内无法正常使用，需要是一个独立的文件）</span></span><br><span class="line"><span class="keyword">static</span> File <span class="title function_">getFile</span><span class="params">(String resourceLocation)</span></span><br></pre></td></tr></table></figure><h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件系统资源 D:\...</span></span><br><span class="line">FileSystemResource</span><br><span class="line"><span class="comment">// URL 资源，如 file://... http://...</span></span><br><span class="line">UrlResource</span><br><span class="line"><span class="comment">// 类路径下的资源，classpth:...</span></span><br><span class="line">ClassPathResource</span><br><span class="line"><span class="comment">// Web 容器上下文中的资源（jar 包、war 包）</span></span><br><span class="line">ServletContextResource</span><br><span class="line"><span class="comment">// 判断资源是否存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从资源中获得 File 对象</span></span><br><span class="line">File <span class="title function_">getFile</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从资源中获得 URI 对象</span></span><br><span class="line">URI <span class="title function_">getURI</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从资源中获得 URI 对象</span></span><br><span class="line">URL <span class="title function_">getURL</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获得资源的 InputStream</span></span><br><span class="line">InputStream <span class="title function_">getInputStream</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获得资源的描述信息</span></span><br><span class="line">String <span class="title function_">getDescription</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h2 id="StreamUtils"><a href="#StreamUtils" class="headerlink" title="StreamUtils"></a>StreamUtils</h2><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(<span class="type">byte</span>[] in, OutputStream out)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(InputStream in, OutputStream out)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(String in, Charset charset, OutputStream out)</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">copyRange</span><span class="params">(InputStream in, OutputStream out, <span class="type">long</span> start, <span class="type">long</span> end)</span></span><br></pre></td></tr></table></figure><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] copyToByteArray(InputStream in)</span><br><span class="line">String <span class="title function_">copyToString</span><span class="params">(InputStream in, Charset charset)</span></span><br><span class="line"><span class="comment">// 舍弃输入流中的内容</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">drain</span><span class="params">(InputStream in)</span></span><br><span class="line">反射、AOP</span><br><span class="line">ReflectionUtils</span><br></pre></td></tr></table></figure><h1 id="反射、AOP"><a href="#反射、AOP" class="headerlink" title="反射、AOP"></a>反射、AOP</h1><h2 id="ReflectionUtils"><a href="#ReflectionUtils" class="headerlink" title="ReflectionUtils"></a>ReflectionUtils</h2><h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在类中查找指定方法</span></span><br><span class="line">Method <span class="title function_">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name)</span></span><br><span class="line"><span class="comment">// 同上，额外提供方法参数类型作查找条件</span></span><br><span class="line">Method <span class="title function_">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt;... paramTypes)</span></span><br><span class="line"><span class="comment">// 获得类中所有方法，包括继承而来的</span></span><br><span class="line">Method[] getAllDeclaredMethods(Class&lt;?&gt; leafClass)</span><br><span class="line"><span class="comment">// 在类中查找指定构造方法</span></span><br><span class="line">Constructor&lt;T&gt; <span class="title function_">accessibleConstructor</span><span class="params">(Class&lt;T&gt; clazz, Class&lt;?&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment">// 是否是 equals() 方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEqualsMethod</span><span class="params">(Method method)</span></span><br><span class="line"><span class="comment">// 是否是 hashCode() 方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isHashCodeMethod</span><span class="params">(Method method)</span></span><br><span class="line"><span class="comment">// 是否是 toString() 方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isToStringMethod</span><span class="params">(Method method)</span></span><br><span class="line"><span class="comment">// 是否是从 Object 类继承而来的方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isObjectMethod</span><span class="params">(Method method)</span></span><br><span class="line"><span class="comment">// 检查一个方法是否声明抛出指定异常</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">declaresException</span><span class="params">(Method method, Class&lt;?&gt; exceptionType)</span></span><br></pre></td></tr></table></figure><h3 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a>执行方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行方法</span></span><br><span class="line">Object <span class="title function_">invokeMethod</span><span class="params">(Method method, Object target)</span></span><br><span class="line"><span class="comment">// 同上，提供方法参数</span></span><br><span class="line">Object <span class="title function_">invokeMethod</span><span class="params">(Method method, Object target, Object... args)</span></span><br><span class="line"><span class="comment">// 取消 Java 权限检查。以便后续执行该私有方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(Method method)</span></span><br><span class="line"><span class="comment">// 取消 Java 权限检查。以便后续执行私有构造方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(Constructor&lt;?&gt; ctor)</span></span><br></pre></td></tr></table></figure><h3 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在类中查找指定属性</span></span><br><span class="line">Field <span class="title function_">findField</span><span class="params">(Class&lt;?&gt; clazz, String name)</span></span><br><span class="line"><span class="comment">// 同上，多提供了属性的类型</span></span><br><span class="line">Field <span class="title function_">findField</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt; type)</span></span><br><span class="line"><span class="comment">// 是否为一个 &quot;public static final&quot; 属性</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isPublicStaticFinal</span><span class="params">(Field field)</span></span><br></pre></td></tr></table></figure><h3 id="设置字段"><a href="#设置字段" class="headerlink" title="设置字段"></a>设置字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 target 对象的 field 属性值</span></span><br><span class="line">Object <span class="title function_">getField</span><span class="params">(Field field, Object target)</span></span><br><span class="line"><span class="comment">// 设置 target 对象的 field 属性值，值为 value</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setField</span><span class="params">(Field field, Object target, Object value)</span></span><br><span class="line"><span class="comment">// 同类对象属性对等赋值</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">shallowCopyFieldState</span><span class="params">(Object src, Object dest)</span></span><br><span class="line"><span class="comment">// 取消 Java 的权限控制检查。以便后续读写该私有属性</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(Field field)</span></span><br><span class="line"><span class="comment">// 对类的每个属性执行 callback</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doWithFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc)</span></span><br><span class="line"><span class="comment">// 同上，多了个属性过滤功能。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doWithFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc,</span></span><br><span class="line"><span class="params">                  ReflectionUtils.FieldFilter ff)</span></span><br><span class="line"><span class="comment">// 同上，但不包括继承而来的属性</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doWithLocalFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc)</span></span><br></pre></td></tr></table></figure><h2 id="AOPUtils"><a href="#AOPUtils" class="headerlink" title="AOPUtils"></a>AOPUtils</h2><h3 id="判断代理类型"><a href="#判断代理类型" class="headerlink" title="判断代理类型"></a>判断代理类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是不是 Spring 代理对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isAopProxy</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 判断是不是 jdk 动态代理对象</span></span><br><span class="line">isJdkDynamicProxy()</span><br><span class="line"><span class="comment">// 判断是不是 CGLIB 代理对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isCglibProxy</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h3 id="获取被代理对象的class"><a href="#获取被代理对象的class" class="headerlink" title="获取被代理对象的class"></a>获取被代理对象的class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取被代理的目标 class</span></span><br><span class="line">Class&lt;?&gt; getTargetClass()</span><br><span class="line">AopContext</span><br></pre></td></tr></table></figure><h3 id="获取当前对象的代理对象"><a href="#获取当前对象的代理对象" class="headerlink" title="获取当前对象的代理对象"></a>获取当前对象的代理对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object <span class="title function_">currentProxy</span><span class="params">()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring注解</title>
      <link href="/2022/07/12/Spring%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/07/12/Spring%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Web-MVC注解"><a href="#Spring-Web-MVC注解" class="headerlink" title="Spring Web MVC注解"></a>Spring Web MVC注解</h2><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p><code>@RequestMapping</code>注解的主要用途是将Web请求与请求处理类中的方法进行映射。<br>Spring MVC和Spring WebFlux都通过<code>RquestMappingHandlerMapping</code>和<code>RequestMappingHndlerAdapter</code>两个类来提供对<code>@RequestMapping</code>注解的支持。<br><code>@RequestMapping</code>注解对请求处理类中的请求处理方法进行标注；</p><p><code>@RequestMapping</code>注解拥有以下的六个配置属性：</p><p><code>value</code>: 映射的请求URL或者其别名</p><p> 指定请求的实际地址，指定的地址可以是URI Template 模式；</p><p><code>method</code>: 兼容HTTP的方法名</p><p> 指定请求的method类型， GET、POST、PUT、DELETE等；</p><p><code>params</code>: 根据HTTP参数的存在、缺省或值对请求进行过滤</p><p> 指定request中必须包含某些参数值时，才让该方法处理。</p><p><code>header</code>: 根据HTTP Header的存在、缺省或值对请求进行过滤</p><p> 指定request中必须包含某些指定的header值，才能让该方法处理请求。</p><p><code>consume</code>: 设定在HTTP请求正文中允许使用的媒体类型</p><p> 指定<strong>处理请求的提交内容类型（Content-Type）</strong>，例如application&#x2F;json, text&#x2F;html;</p><p><code>product</code>: 在HTTP响应体中允许使用的媒体类型</p><p> 指定<strong>返回的内容类型</strong>，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</p><p>提示：在使用<code>@RequestMapping</code>之前，请求处理类还需要使用<code>@Controller</code>或<code>@RestController</code>进行标记</p><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p><code>@RequestBody</code>在处理请求方法的参数列表中使用，它可以将请求主体中的参数绑定到一个对象中，请求主体参数是通过<code>HttpMessageConverter</code>传递的，<br>根据请求主体中的参数名与对象的属性名进行匹配并绑定值。<br>此外，还可以通过<code>@Valid</code>注解对请求主体中的参数进行校验。</p><h3 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h3><p><code>@GetMapping</code>注解用于处理<strong>HTTP GET</strong>请求，并将请求映射到具体的处理方法中。<br>具体来说，<code>@GetMapping</code>是一个组合注解，它相当于是<code>@RequestMapping(method=RequestMethod.GET)</code>的快捷方式。</p><h3 id="PostMapping"><a href="#PostMapping" class="headerlink" title="@PostMapping"></a>@PostMapping</h3><p><code>@PostMapping</code>注解用于处理<strong>HTTP POST</strong>请求，并将请求映射到具体的处理方法中。<code>@PostMapping</code>与<code>@GetMapping</code>一样，也是一个组合注解，它相当于是<code>@RequestMapping(method=HttpMethod.POST)</code>的快捷方式。</p><h3 id="PutMapping"><a href="#PutMapping" class="headerlink" title="@PutMapping"></a>@PutMapping</h3><p><code>@PutMapping</code>注解用于处理<strong>HTTP PUT</strong>请求，并将请求映射到具体的处理方法中，<code>@PutMapping</code>是一个组合注解，相当于是<code>@RequestMapping(method=HttpMethod.PUT)</code>的快捷方式。</p><h3 id="DeleteMapping"><a href="#DeleteMapping" class="headerlink" title="@DeleteMapping"></a>@DeleteMapping</h3><p><code>@DeleteMapping</code>注解用于处理<strong>HTTP DELETE</strong>请求，并将请求映射到删除方法中。<code>@DeleteMapping</code>是一个组合注解，它相当于是<code>@RequestMapping(method=HttpMethod.DELETE)</code>的快捷方式。</p><h3 id="PatchMapping"><a href="#PatchMapping" class="headerlink" title="@PatchMapping"></a>@PatchMapping</h3><p><code>@PatchMapping</code>注解用于处理<strong>HTTP PATCH</strong>请求，并将请求映射到对应的处理方法中。@PatchMapping相当于是@RequestMapping(method&#x3D;HttpMethod.PATCH)的快捷方式。</p><h3 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h3><p><code>@ControllerAdvice</code>是<code>@Component</code>注解的一个延伸注解，Spring会自动扫描并检测被<code>@ControllerAdvice</code>所标注的类。</p><p><code>@ControllerAdvice</code>需要和<code>@ExceptionHandler</code>、<code>@InitBinder</code>以及<code>@ModelAttribute</code>注解搭配使用，主要是用来处理控制器所抛出的异常信息。</p><p>首先，我们需要定义一个被<code>@ControllerAdvice</code>所标注的类，在该类中，定义一个用于处理具体异常的方法，并使用<code>@ExceptionHandler</code>注解进行标记。</p><p>此外，在有必要的时候，可以使用<code>@InitBinder</code>在类中进行全局的配置，还可以使用<code>@ModelAttribute</code>配置与视图相关的参数。</p><p>使用<code>@ControllerAdvice</code>注解，就可以快速的创建统一的，自定义的异常处理类。</p><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p><code>@ResponseBody</code>会自动将控制器中方法的返回值写入到HTTP响应中。</p><p>特别的，<code>@ResponseBody</code>注解只能用在被<code>@Controller</code>注解标记的类中。</p><p>如果在被<code>@RestController</code>标记的类中，则方法不需要使用<code>@ResponseBody</code>注解进行标注。</p><p><code>@RestController</code>相当于是<code>@Controller</code>和<code>@ResponseBody</code>的组合注解。</p><h3 id="ResponseStatus"><a href="#ResponseStatus" class="headerlink" title="@ResponseStatus"></a>@ResponseStatus</h3><p><code>@ResponseStatus</code>注解可以标注请求处理方法。使用此注解，可以指定响应所需要的<strong>HTTP STATUS</strong>。</p><p>特别地，我们可以使用<strong>HttpStauts</strong>类对该注解的<strong>value</strong>属性进行赋值。</p><h3 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h3><p><code>@ExceptionHander</code>注解用于标注处理特定类型异常类所抛出异常的方法。</p><p>当控制器中的方法抛出异常时，Spring会自动捕获异常，并将捕获的异常信息传递给被<code>@ExceptionHandler</code>标注的方法。</p><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><p><code>@PathVariable</code>注解是将方法中的参数绑定到请求URI中的模板变量上。</p><p>可以通过<code>@RequestMapping</code>注解来指定URI的模板变量，然后使用<code>@PathVariable</code>注解将方法中的参数绑定到模板变量上。</p><p>特别地，<code>@PathVariable</code>注解允许我们使用<code>value</code>或<code>name</code>属性来给参数取一个别名</p><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><p><code>@RequestParam</code>注解用于将方法的参数与Web请求的传递的参数进行绑定。</p><p>使用<code>@RequestParam</code>可以轻松的访问<strong>HTTP请求参数的值</strong>。</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><p><code>@Controller</code>是<code>@Component</code>注解的一个延伸，Spring会自动扫描并配置被该注解标注的类。</p><p>此注解用于标注Spring MVC的控制器。</p><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p><code>@RestController</code>是在Spring 4.0开始引入的，这是一个特定的控制器注解。</p><p>此注解相当于<code>@Controller</code>和<code>@ResponseBody</code>的快捷方式。</p><p>当使用此注解时，不需要再在方法上使用<code>@ResponseBody</code>注解。</p><h3 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h3><p>通过此注解，可以通过模型索引名称来访问已经存在于控制器中的model。</p><h3 id="CrossOrigin"><a href="#CrossOrigin" class="headerlink" title="@CrossOrigin"></a>@CrossOrigin</h3><p><code>@CrossOrigin</code>注解将为请求处理类或请求处理方法提供跨域调用支持。</p><p>如果我们将此注解标注类，那么类中的所有方法都将获得支持跨域的能力。</p><p>使用此注解的好处是可以微调跨域行为。</p><h3 id="InitBinder"><a href="#InitBinder" class="headerlink" title="@InitBinder"></a>@InitBinder</h3><p><code>@InitBinder</code>注解用于标注初始化<code>WebDataBinider</code>的方法，</p><p>该方法用于对<strong>Http请求传递的表单数据</strong>进行处理，如时间格式化、字符串处理等。</p><h2 id="Spring-Bean注解"><a href="#Spring-Bean注解" class="headerlink" title="Spring Bean注解"></a>Spring Bean注解</h2><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p><code>@ComponentScan</code>注解用于配置Spring需要扫描的被组件注解注释的类所在的包。</p><p>可以通过配置其<code>basePackages</code>属性或者<code>value</code>属性来配置需要扫描的包路径。<code>value</code>属性是<code>basePackages</code>的别名。</p><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><p><code>@Component</code>注解用于标注一个普通的组件类，它没有明确的业务范围，只是通知Spring被此注解的类需要被纳入到Spring Bean容器中并进行管理。</p><h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h3><p><code>@Service</code>注解是<code>@Component</code>的一个延伸（特例），它用于标注业务逻辑类。</p><p>与<code>@Component</code>注解一样，被此注解标注的类，会自动被Spring所管理。</p><h3 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h3><p><code>@Repository</code>注解也是<code>@Component</code>注解的延伸，与<code>@Component</code>注解一样，被此注解标注的类会被Spring自动管理起来，</p><p><code>@Repository</code>注解用于标注<strong>DAO层</strong>的数据持久化类。</p><h2 id="Spring-Dependency-Inject"><a href="#Spring-Dependency-Inject" class="headerlink" title="Spring Dependency Inject"></a>Spring Dependency Inject</h2><h3 id="DependsOn"><a href="#DependsOn" class="headerlink" title="@DependsOn"></a>@DependsOn</h3><p><code>@DependsOn</code>注解可以配置Spring IoC容器在初始化一个Bean之前，先初始化其他的Bean对象。</p><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><p><code>@Bean</code>注解主要的作用是告知Spring，被此注解所标注的类将需要纳入到Bean管理工厂中。</p><p><code>@Bean</code>注解的用法很简单，在这里，着重介绍<code>@Bean</code>注解中<code>initMethod</code>和<code>destroyMethod</code>的用法。</p><h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><p><code>@Scope</code>注解可以用来定义<code>@Component</code>标注的类的作用范围以及<code>@Bean</code>所标记的类的作用范围。</p><p><code>@Scope</code>所限定的作用范围有：<code>singleton、prototype、request、session、globalSession</code>或者其他的自定义范围。</p><p>这里以<code>prototype</code>为例子进行讲解。</p><p>当一个Spring Bean被声明为<code>prototype</code>（原型模式）时，在每次需要使用到该类的时候，Spring IoC容器都会初始化一个新的改类的实例。</p><h3 id="Scope-单例模式"><a href="#Scope-单例模式" class="headerlink" title="@Scope 单例模式"></a>@Scope 单例模式</h3><p>当<code>@Scope</code>的作用范围设置成<code>Singleto</code>n时，被此注解所标注的类只会被Spring IoC容器初始化一次。</p><p>在默认情况下，Spring IoC容器所初始化的类实例都为<code>Singleton</code>。</p><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p><code>@Autowired</code>注解用于标记Spring将要解析和注入的依赖项。</p><p>此注解可以作用在构造函数、字段和setter方法上。</p><h3 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h3><p>当系统中需要配置多个具有相同类型的Bean时，<code>@Primary</code>可以定义这些Bean的优先级。</p><p>比如多个实现类<code>ServiceImpl</code>，有一个实现类注解加<code>@Primary</code>则优先实现该类。</p><h3 id="PostConstruct与-PreDestroy"><a href="#PostConstruct与-PreDestroy" class="headerlink" title="@PostConstruct与@PreDestroy"></a>@PostConstruct与@PreDestroy</h3><p>值得注意的是，这两个注解不属于Spring,它们是源于JSR-250中的两个注解，位于common-annotations.jar中。</p><p><code>@PostConstruct</code>注解用于标注在Bean被Spring初始化之前需要执行的方法。</p><p><code>@PreDestroy</code>注解用于标注Bean被销毁前需要执行的方法。</p><h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><p>当系统中存在同一类型的多个Bean时，<code>@Autowired</code>在进行依赖注入的时候就不知道该选择哪一个实现类进行注入。</p><p>此时，我们可以使用<code>@Qualifier</code>注解来微调，帮助<code>@Autowired</code>选择正确的依赖项。</p><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p><code>@SpringBootApplication</code>注解是一个快捷的配置注解（启动类注解），</p><p>在被它标注的类中，可以定义一个或多个Bean，并自动触发自动配置Bean和自动扫描组件。</p><p>此注解相当于@<code>Configuration</code>、<code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code>的组合。</p><p>在Spring Boot应用程序的主类中，就使用了此注解。</p><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p><code>@EnableAutoConfiguration</code>注解用于通知Spring，</p><p>根据当前类路径下引入的依赖包，自动配置与这些依赖包相关的配置项。</p><h3 id="ConditionalOnClass与-ConditionalOnMissingClass"><a href="#ConditionalOnClass与-ConditionalOnMissingClass" class="headerlink" title="@ConditionalOnClass与@ConditionalOnMissingClass"></a>@ConditionalOnClass与@ConditionalOnMissingClass</h3><p>这两个注解属于类条件注解，它们根据是否存在某个类作为判断依据来决定是否要执行某些配置。</p><h3 id="ConditionalOnBean与-ConditionalOnMissingBean"><a href="#ConditionalOnBean与-ConditionalOnMissingBean" class="headerlink" title="@ConditionalOnBean与@ConditionalOnMissingBean"></a>@ConditionalOnBean与@ConditionalOnMissingBean</h3><p>这两个注解属于对象条件注解，根据是否存在某个对象作为依据来决定是否要执行某些配置方法。</p><h3 id="ConditionalOnProperty"><a href="#ConditionalOnProperty" class="headerlink" title="@ConditionalOnProperty"></a>@ConditionalOnProperty</h3><p><code>@ConditionalOnProperty</code>注解会根据Spring配置文件中的配置项是否满足配置要求，从而决定是否要执行被其标注的方法。</p><h3 id="ConditionalOnResource"><a href="#ConditionalOnResource" class="headerlink" title="@ConditionalOnResource"></a>@ConditionalOnResource</h3><p>此注解用于检测当某个配置文件存在使，则触发被其标注的方法，</p><h3 id="ConditionalOnWebApplication与-ConditionalOnNotWebApplication"><a href="#ConditionalOnWebApplication与-ConditionalOnNotWebApplication" class="headerlink" title="@ConditionalOnWebApplication与@ConditionalOnNotWebApplication"></a>@ConditionalOnWebApplication与@ConditionalOnNotWebApplication</h3><p>这两个注解用于判断当前的应用程序是否是Web应用程序。如果当前应用是Web应用程序，则使用 <code>Spring WebApplicationContext</code>,并定义其会话的生命周期。</p><h3 id="ConditionalExpression"><a href="#ConditionalExpression" class="headerlink" title="@ConditionalExpression"></a>@ConditionalExpression</h3><p>此注解可以让我们控制更细粒度的基于表达式的配置条件限制。当表达式满足某个条件或者表达式为真的时候，将会执行被此注解标注的方法。</p><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><p><code>@Conditional</code>注解可以控制更为复杂的配置条件。在Spring内置的条件控制注解不满足应用需求的时候，可以使用此注解定义自定义的控制条件，以达到自定义的要求。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2022/07/09/Git/"/>
      <url>/2022/07/09/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="git-config"><a href="#git-config" class="headerlink" title="git  config"></a>git  config</h2><p>git config –global user.name “alan”</p><p>git config –global user.email <a href="mailto:&#120;&#120;&#120;&#64;&#x78;&#x78;&#x2e;&#x63;&#x6f;&#109;">&#120;&#120;&#120;&#64;&#x78;&#x78;&#x2e;&#x63;&#x6f;&#109;</a></p><p>设置用户名和邮箱</p><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>初始化 会生成.git</p><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>状态：当前所属分支，文件状态，可以进行的操作</p><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>添加到缓存区</p><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>添加到本地仓库</p><p>git commit -m “说明信息”</p><p>git commit -a -m “删库跑路” &#x2F;&#x2F;add 和commit合并</p><p>git commit -am “删库跑路” &#x2F;&#x2F;add 和commit合并</p><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>日志</p><p>q：退出</p><h2 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h2><p>touch .gitignore &#x2F;&#x2F;创建.gitignore文件</p><p>将不需要上传的文件名放入.gitignore</p><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p>git branch “xx” &#x2F;&#x2F;创建分支xx</p><p>git branch &#x2F;&#x2F;查看分支</p><h2 id="git-checkout-xx"><a href="#git-checkout-xx" class="headerlink" title="git checkout xx"></a>git checkout xx</h2><p>git checkout xx &#x2F;&#x2F;切换到分支xx</p><p>git checout master &#x2F;&#x2F;切换到分支master</p><p>git branch -d xx &#x2F;&#x2F;删除分支xx</p><p>git branch -D xx &#x2F;&#x2F;彻底删除分支xx</p><p>git checkout -b xx &#x2F;&#x2F;创建分支xx并切换到分支xx</p><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>Git merge xx &#x2F;&#x2F;将其他分支合并到此分支</p><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>git clone <a href="https://xxxxxxxx/">https://xxxxxxxx</a></p><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>Git remote -v &#x2F;&#x2F;远程仓库地址</p><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>推送到远程仓库</p><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>git fetch &#x2F;&#x2F;拉到本地版本库，本地文件不变</p><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>git diff origin(远程仓库名)&#x2F;main(远程分支名)  &#x2F;&#x2F;对比区别</p><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>git pull &#x2F;&#x2F;把远程仓库的内容直接整合到工作区</p><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><ol><li>Initialize Repository &#x2F;&#x2F;git init</li><li>U &#x2F;&#x2F;未追踪状态-Untracked</li><li>+加号 &#x2F;&#x2F;git add</li><li>-减号 &#x2F;&#x2F;取消add</li><li>A &#x2F;&#x2F;被添加到暂存区-Added</li><li>message 和 ✓ &#x2F;&#x2F;git commit</li><li>M &#x2F;&#x2F;被修改状态-Modifed</li><li>publish branch &#x2F;&#x2F;push</li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript进阶</title>
      <link href="/2022/06/26/TypeScript%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/06/26/TypeScript%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript进阶"><a href="#TypeScript进阶" class="headerlink" title="TypeScript进阶"></a>TypeScript进阶</h1><h2 id="proxy-amp-Reflect"><a href="#proxy-amp-Reflect" class="headerlink" title="proxy &amp; Reflect"></a>proxy &amp; Reflect</h2><p>学习proxy对象代理</p><p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）</p><p>target</p><p>要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</p><p>handler</p><p>一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为。</p><p>handler.get() 本次使用的get</p><p>属性读取操作的捕捉器。</p><p>handler.set() 本次使用的set</p><p>属性设置操作的捕捉器。</p><p>Reflect<br>与大多数全局对象不同Reflect并非一个构造函数，所以不能通过new运算符对其进行调用，或者将Reflect对象作为一个函数来调用。Reflect的所有属性和方法都是静态的（就像Math对象）</p><p>Reflect.get(target, name, receiver)<br>Reflect.get方法查找并返回target对象的name属性，如果没有该属性返回undefined</p><p>Reflect.set(target, name,value, receiver)<br>Reflect.set方法设置target对象的name属性等于value。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">text</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">proxy</span> = (<span class="params"><span class="built_in">object</span>: <span class="built_in">any</span>, key: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="built_in">object</span>, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, prop, receiver</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`get key======&gt;<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop, receiver)</span><br><span class="line">        &#125;,</span><br><span class="line"> </span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, prop, value, receiver</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`set key======&gt;<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value, receiver)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">logAccess</span> = (<span class="params"><span class="built_in">object</span>: Person, key: <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;text&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">proxy</span>(<span class="built_in">object</span>, key)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">man</span>: <span class="title class_">Person</span> = <span class="title function_">logAccess</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小满&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;我的很小&quot;</span></span><br><span class="line">&#125;, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">man.<span class="property">age</span>  = <span class="number">30</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(man);<span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">text</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">proxy</span> = (<span class="params"><span class="built_in">object</span>: <span class="built_in">any</span>, key: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="built_in">object</span>, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, prop, receiver</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`get key======&gt;<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop, receiver)</span><br><span class="line">        &#125;,</span><br><span class="line"> </span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, prop, value, receiver</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`set key======&gt;<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value, receiver)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">logAccess</span> = (<span class="params"><span class="built_in">object</span>: Person, key: <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;text&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">proxy</span>(<span class="built_in">object</span>, key)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">man</span>: <span class="title class_">Person</span> = <span class="title function_">logAccess</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小满&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;我的很小&quot;</span></span><br><span class="line">&#125;, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">man.<span class="property">age</span>  = <span class="number">30</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(man);</span><br></pre></td></tr></table></figure><p>使用泛型+keyof优化</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">text</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">proxy</span> = (<span class="params"><span class="built_in">object</span>: <span class="built_in">any</span>, key: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="built_in">object</span>, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, prop, receiver</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`get key======&gt;<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop, receiver)</span><br><span class="line">        &#125;,</span><br><span class="line"> </span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, prop, value, receiver</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`set key======&gt;<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value, receiver)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> logAccess = &lt;T&gt;(<span class="attr">object</span>: T, <span class="attr">key</span>: keyof T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">proxy</span>(<span class="built_in">object</span>, key)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">man</span>: <span class="title class_">Person</span> = <span class="title function_">logAccess</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小满&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;我的很小&quot;</span></span><br><span class="line">&#125;, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> man2 = <span class="title function_">logAccess</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;小满2&quot;</span></span><br><span class="line">&#125;, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">man.<span class="property">age</span> = <span class="number">30</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(man);</span><br></pre></td></tr></table></figure><h2 id="Partial-amp-Pick"><a href="#Partial-amp-Pick" class="headerlink" title="Partial &amp; Pick"></a>Partial &amp; Pick</h2><h3 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 源码</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T optional</span></span><br><span class="line"><span class="comment">  将T中的所有属性设置为可选</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 使用前</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> p = <span class="title class_">Partial</span>&lt;<span class="title class_">Person</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 转换后全部转为了可选</span></span><br><span class="line"><span class="keyword">type</span> p = &#123;</span><br><span class="line">    name?: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">    age?: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>keyof 将一个接口对象的全部属性取出来变成联合类型</li><li>in 我们可以理解成for in P 就是key 遍历 keyof T 就是联合类型的每一项</li><li>？这个操作就是将每一个属性变成可选项</li><li>T[P] <code>索引访问操作符</code>，与 JavaScript 种访问属性值的操作类似</li></ol><h3 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从类型定义T的属性中，选取指定一组属性，返回一个新的类型定义。</span></span><br><span class="line"><span class="comment">//1. </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * From T, pick a set of properties whose keys are in the union K</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. </span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">text</span>:<span class="built_in">string</span></span><br><span class="line">    <span class="attr">address</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Ex</span> = <span class="string">&quot;text&quot;</span> | <span class="string">&quot;age&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">Pick</span>&lt;<span class="title class_">Person</span>,<span class="title class_">Ex</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Record-amp-Readonly"><a href="#Record-amp-Readonly" class="headerlink" title="Record &amp; Readonly"></a>Record &amp; Readonly</h2><h3 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly"></a>Readonly</h3><p>和Partial很像，只是把?替换成了Readonly</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>keyof 将一个接口对象的全部属性取出来变成联合类型</li><li>in 我们可以理解成for in P 就是key 遍历 keyof T 就是联合类型的每一项</li><li>Readonly 这个操作就是将每一个属性变成只读</li><li>T[P] <code>索引访问操作符</code>，与 JavaScript 种访问属性值的操作类似</li></ol><h3 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>keyof any 返回 string number symbol 的联合类型</li><li>in 我们可以理解成for in P 就是key 遍历 keyof any 就是string number symbol类型的每一项</li><li>extends来约束我们的类型</li><li>T 直接返回类型</li></ol><p>做到了约束 对象的key 同时约束了 value</p><h2 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h2><p>Infer 是TypeScript新增的关键字 充当占位符</p><p>实现一个条件类型推断的例子</p><p>定义一个类型：如果是数组类型，就返回数组元素的类型；否则，传入什么类型就返回什么类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Infer</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt; ? T[<span class="built_in">number</span>] : T</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">Infer</span>&lt;(<span class="built_in">boolean</span> | <span class="built_in">string</span>)[]&gt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">Infer</span>&lt;<span class="literal">null</span>&gt;</span><br></pre></td></tr></table></figure><p>使用infer修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Infer</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;infer U&gt; ? U : T</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">Infer</span>&lt;(<span class="built_in">string</span> | <span class="title class_">Symbol</span>)[]&gt;</span><br></pre></td></tr></table></figure><p>配合tuple转换union联合类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TupleToUni</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;infer E&gt; ? E : <span class="built_in">never</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TTuple</span> = [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ToUnion</span> = <span class="title class_">TupleToUni</span>&lt;<span class="title class_">TTuple</span>&gt;; <span class="comment">// string | number</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2022/06/25/TypeScript/"/>
      <url>/2022/06/25/TypeScript/</url>
      
        <content type="html"><![CDATA[<p>起步安装：npm install typescript -g</p><p>运行：tsc 文件名</p><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>包含：String、Number、Boolean、null、undefined以及ES6的Symbol和ES10的BigInt</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str</span>:<span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="comment">//es6字符串模板</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>:<span class="built_in">string</span> = <span class="string">`aaa<span class="subst">$&#123;b&#125;</span>`</span></span><br><span class="line"><span class="comment">//$&#123;&#125;用来在模板字符串中嵌入表达式</span></span><br></pre></td></tr></table></figure><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notANumber</span>: <span class="built_in">number</span> = <span class="title class_">NaN</span>;<span class="comment">//Nan</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="number">123</span>;<span class="comment">//普通数字</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">infinityNumber</span>: <span class="built_in">number</span> = <span class="title class_">Infinity</span>;<span class="comment">//无穷大</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">6</span>;<span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">hex</span>: <span class="built_in">number</span> = <span class="number">0xf00d</span>;<span class="comment">//十六进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">binary</span>: <span class="built_in">number</span> = <span class="number">0b1010</span>;<span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">octal</span>: <span class="built_in">number</span> = <span class="number">0o744</span>;<span class="comment">//八进制</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b1</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;<span class="comment">//可以直接使用布尔值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b2</span>: <span class="built_in">boolean</span> = <span class="title class_">Boolean</span>(<span class="number">1</span>);<span class="comment">//也可以通过函数返回布尔值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b3</span>: <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>);<span class="comment">//也可以通过构造函数返回布尔值</span></span><br></pre></td></tr></table></figure><h3 id="空值类型"><a href="#空值类型" class="headerlink" title="空值类型"></a>空值类型</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 void 表示没有任何返回值的函数</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>):<span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="built_in">void</span> = <span class="literal">undefined</span> <span class="comment">//void也可以定义undefined</span></span><br></pre></td></tr></table></figure><h3 id="NULL和undefined"><a href="#NULL和undefined" class="headerlink" title="NULL和undefined"></a>NULL和undefined</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;<span class="comment">//定义undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>;<span class="comment">//定义null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 string 类型的变量：</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num2</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line">num2 = test</span><br><span class="line"><span class="comment">//或者这样的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num2</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line">num2 = test</span><br><span class="line"><span class="comment">//以上有待验证</span></span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果配置tsconfig.<span class="property">json</span>开启了严格模式</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="literal">null</span>不能赋予<span class="built_in">void</span>类型</span><br></pre></td></tr></table></figure><h2 id="Any和unknown"><a href="#Any和unknown" class="headerlink" title="Any和unknown"></a>Any和unknown</h2><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//没有强制限定哪种类型，随时切换类型都可以 我们可以对 any 进行任何操作，不需要检查类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">anys</span>:<span class="built_in">any</span> = <span class="number">123</span></span><br><span class="line">anys = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">anys = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明变量的时候没有指定任意类型默认为any</span></span><br><span class="line"><span class="keyword">let</span> anys;</span><br><span class="line"><span class="comment">//弊端如果使用any就失去了TS类型检测的作用</span></span><br></pre></td></tr></table></figure><h3 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unknow类型比any更加严格当你要使用any 的时候可以尝试使用unknow</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">unknown</span>;</span><br><span class="line"> </span><br><span class="line">value = <span class="literal">true</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="number">42</span>;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="string">&quot;Hello World&quot;</span>;    <span class="comment">// OK</span></span><br><span class="line">value = [];               <span class="comment">// OK</span></span><br><span class="line">value = &#123;&#125;;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">null</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">undefined</span>;        <span class="comment">// OK</span></span><br><span class="line">value = <span class="title class_">Symbol</span>(<span class="string">&quot;type&quot;</span>);   <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unknow类型不能作为子类型只能作为父类型 any可以作为父类型和子类型</span></span><br></pre></td></tr></table></figure>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果是any类型在对象没有这个属性的时候还在获取是不会报错的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:<span class="built_in">any</span> = &#123;<span class="attr">b</span>:<span class="number">1</span>&#125;</span><br><span class="line">obj.<span class="property">a</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 如果是unknow 是不能调用属性和方法，会报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:<span class="built_in">unknown</span> = &#123;<span class="attr">b</span>:<span class="number">1</span>,<span class="attr">ccc</span>:():<span class="function"><span class="params">number</span>=&gt;</span><span class="number">213</span>&#125;</span><br><span class="line">obj.<span class="property">b</span></span><br><span class="line">obj.<span class="title function_">ccc</span>()</span><br></pre></td></tr></table></figure><h2 id="对象的类型"><a href="#对象的类型" class="headerlink" title="对象的类型"></a>对象的类型</h2><p>用关键字<strong>interface</strong>（接口）</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">student</span>: <span class="title class_">Student</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重名interface 可以合并</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以继承</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: B = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="可选属性-使用-操作符"><a href="#可选属性-使用-操作符" class="headerlink" title="可选属性 使用?操作符"></a>可选属性 使用?操作符</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">student</span>: <span class="title class_">Student</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</span></span><br><span class="line"><span class="keyword">interface</span>  <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">student</span>: <span class="title class_">Student</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">isAdmin</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    a?: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a1</span>: A = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a1.<span class="property">b</span> = <span class="number">3</span>;<span class="comment">//会报错，b为只读，不能重新赋值</span></span><br></pre></td></tr></table></figure><h3 id="添加函数"><a href="#添加函数" class="headerlink" title="添加函数"></a>添加函数</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">cb</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">student</span>: <span class="title class_">Student</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">cb</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组的类型"><a href="#数组的类型" class="headerlink" title="数组的类型"></a>数组的类型</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型[]"></a>类型[]</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">//数字类型的数组</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr2</span>: <span class="built_in">string</span>[] = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>]; <span class="comment">//字符串类型的数组</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr3</span>: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="string">&quot;2&quot;</span>, <span class="literal">true</span>]; <span class="comment">//任意类型的数组</span></span><br></pre></td></tr></table></figure><h3 id="数组泛型"><a href="#数组泛型" class="headerlink" title="数组泛型"></a>数组泛型</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="用接口表示数组"><a href="#用接口表示数组" class="headerlink" title="用接口表示数组"></a>用接口表示数组</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NumberArr</span> &#123;</span><br><span class="line">    [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="title class_">NumberArr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示：只要索引的类型是数字时，那么值的类型必须是数字。</span></span><br></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">data</span>:<span class="built_in">number</span>[][] = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure><h3 id="arguments类数组"><a href="#arguments类数组" class="headerlink" title="arguments类数组"></a>arguments类数组</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Arr</span>(<span class="params">...args:<span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">IArguments</span> = <span class="variable language_">arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Arr</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//主：IArguements 是 TS 中定义好了的类型，它实际上就是：</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IArguments</span> &#123;</span><br><span class="line">    [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">callee</span>: <span class="title class_">Function</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="any在数组中的应用"><a href="#any在数组中的应用" class="headerlink" title="any在数组中的应用"></a>any在数组中的应用</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">any</span>[] = [<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>,<span class="literal">true</span>,&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="函数的类型"><a href="#函数的类型" class="headerlink" title="函数的类型"></a>函数的类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">name: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;typescript&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选参数</span></span><br><span class="line"><span class="keyword">const</span> fn2 = <span class="keyword">function</span> (<span class="params">name: <span class="built_in">string</span>, age?: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>(<span class="string">&#x27;typescript&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="keyword">const</span> fn3 = <span class="keyword">function</span> (<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span> = <span class="number">18</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn3</span>(<span class="string">&#x27;typescript&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余参数</span></span><br><span class="line"><span class="keyword">const</span> fn4 = <span class="keyword">function</span> (<span class="params">array:<span class="built_in">number</span>[],...args: <span class="built_in">any</span>[]</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;args.join(<span class="string">&#x27; &#x27;</span>)&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="title function_">fn4</span>(arr,<span class="string">&#x27;typescript&#x27;</span>, <span class="string">&#x27;angular&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数重载</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn5</span>(<span class="params">params: <span class="built_in">string</span></span>): <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn5</span>(<span class="params">params: <span class="built_in">number</span>,params2: <span class="built_in">number</span></span>): <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn5</span>(<span class="params">params: <span class="built_in">any</span>,params2?: <span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params,params2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn5</span>(<span class="string">&#x27;typescript&#x27;</span>);</span><br><span class="line"><span class="title function_">fn5</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口定义函数</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Add</span> &#123;</span><br><span class="line">    (<span class="attr">num1</span>: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">add</span>: <span class="title class_">Add</span> = (<span class="attr">num1</span>: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStudent</span>(<span class="params">student: Student</span>): <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="联合类型-交叉类型-类型断言"><a href="#联合类型-交叉类型-类型断言" class="headerlink" title="联合类型 | 交叉类型 | 类型断言"></a>联合类型 | 交叉类型 | 类型断言</h2><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如我们的手机号通常是13XXXXXXX 为数字类型 这时候产品说需要支持座机</span></span><br><span class="line"><span class="comment">//所以我们就可以使用联合类型支持座机字符串</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPhone</span>: <span class="built_in">number</span> | <span class="built_in">string</span>  = <span class="string">&#x27;010-820&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样写是会报错的应为我们的联合类型只有数字和字符串并没有布尔值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPhone</span>: <span class="built_in">number</span> | <span class="built_in">string</span>  = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数使用联合类型</span></span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">something</span>:<span class="built_in">number</span> | <span class="built_in">boolean</span>):<span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> !!something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Man</span> &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> xiaoming = (<span class="attr">man</span>: <span class="title class_">Student</span> &amp; <span class="title class_">Man</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(man.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(man.<span class="property">age</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(man.<span class="property">sex</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">xiaoming</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;xiaoming&#x27;</span>,<span class="attr">age</span>:<span class="number">30</span>,<span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">语法：值 <span class="keyword">as</span> 类型 或 &lt;类型&gt;值 value <span class="keyword">as</span> <span class="built_in">string</span> &lt;<span class="built_in">string</span>&gt;value</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">run</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="attr">build</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">type</span>: A | B):<span class="function"><span class="params">string</span> =&gt;</span> (<span class="keyword">type</span> <span class="keyword">as</span> A).<span class="property">run</span></span><br><span class="line">注意：断言只能『欺骗』<span class="variable constant_">TS</span>编辑器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误</span><br><span class="line"></span><br><span class="line"><span class="comment">//as const</span></span><br><span class="line"><span class="keyword">const</span> names = <span class="string">&quot;John&quot;</span> <span class="comment">//无法修改</span></span><br><span class="line"><span class="keyword">let</span> names2 = <span class="string">&quot;John&quot;</span> <span class="keyword">as</span> <span class="keyword">const</span> <span class="comment">//无法修改</span></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> a1 = [<span class="number">10</span>, <span class="number">20</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">const</span> a2 = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line">a1.<span class="title function_">unshift</span>(<span class="number">30</span>); <span class="comment">// 错误，此时已经断言字面量为[10, 20],数据无法做任何修改</span></span><br><span class="line">a2.<span class="title function_">unshift</span>(<span class="number">30</span>); <span class="comment">// 通过，没有修改指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类型断言不具有影响力</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toBoolean</span>(<span class="params">something: <span class="built_in">any</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> something <span class="keyword">as</span> <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">toBoolean</span>(<span class="number">1</span>); <span class="comment">//返回值为1</span></span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="ECMAScript内置对象"><a href="#ECMAScript内置对象" class="headerlink" title="ECMAScript内置对象"></a>ECMAScript内置对象</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="title class_">Number</span> = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="title class_">String</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">r</span>: <span class="title class_">RegExp</span> = <span class="regexp">/^1/</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="title class_">Error</span> = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="DOM和BOM的内置对象"><a href="#DOM和BOM的内置对象" class="headerlink" title="DOM和BOM的内置对象"></a>DOM和BOM的内置对象</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">body</span>: <span class="title class_">HTMLElement</span> = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">allDiv</span>: <span class="title class_">NodeList</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="comment">//读取div 这种需要类型断言 或者加个判断应为读不到返回null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">div</span>:<span class="title class_">HTMLElement</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e: MouseEvent</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//dom元素的映射表</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">HTMLElementTagNameMap</span> &#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: <span class="title class_">HTMLAnchorElement</span>;</span><br><span class="line">    <span class="string">&quot;abbr&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;applet&quot;</span>: <span class="title class_">HTMLAppletElement</span>;</span><br><span class="line">    <span class="string">&quot;area&quot;</span>: <span class="title class_">HTMLAreaElement</span>;</span><br><span class="line">    <span class="string">&quot;article&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;aside&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;audio&quot;</span>: <span class="title class_">HTMLAudioElement</span>;</span><br><span class="line">    <span class="string">&quot;b&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;base&quot;</span>: <span class="title class_">HTMLBaseElement</span>;</span><br><span class="line">    <span class="string">&quot;bdi&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;bdo&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;blockquote&quot;</span>: <span class="title class_">HTMLQuoteElement</span>;</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: <span class="title class_">HTMLBodyElement</span>;</span><br><span class="line">    <span class="string">&quot;br&quot;</span>: <span class="title class_">HTMLBRElement</span>;</span><br><span class="line">    <span class="string">&quot;button&quot;</span>: <span class="title class_">HTMLButtonElement</span>;</span><br><span class="line">    <span class="string">&quot;canvas&quot;</span>: <span class="title class_">HTMLCanvasElement</span>;</span><br><span class="line">    <span class="string">&quot;caption&quot;</span>: <span class="title class_">HTMLTableCaptionElement</span>;</span><br><span class="line">    <span class="string">&quot;cite&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;col&quot;</span>: <span class="title class_">HTMLTableColElement</span>;</span><br><span class="line">    <span class="string">&quot;colgroup&quot;</span>: <span class="title class_">HTMLTableColElement</span>;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: <span class="title class_">HTMLDataElement</span>;</span><br><span class="line">    <span class="string">&quot;datalist&quot;</span>: <span class="title class_">HTMLDataListElement</span>;</span><br><span class="line">    <span class="string">&quot;dd&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;del&quot;</span>: <span class="title class_">HTMLModElement</span>;</span><br><span class="line">    <span class="string">&quot;details&quot;</span>: <span class="title class_">HTMLDetailsElement</span>;</span><br><span class="line">    <span class="string">&quot;dfn&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;dialog&quot;</span>: <span class="title class_">HTMLDialogElement</span>;</span><br><span class="line">    <span class="string">&quot;dir&quot;</span>: <span class="title class_">HTMLDirectoryElement</span>;</span><br><span class="line">    <span class="string">&quot;div&quot;</span>: <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">    <span class="string">&quot;dl&quot;</span>: <span class="title class_">HTMLDListElement</span>;</span><br><span class="line">    <span class="string">&quot;dt&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;em&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;embed&quot;</span>: <span class="title class_">HTMLEmbedElement</span>;</span><br><span class="line">    <span class="string">&quot;fieldset&quot;</span>: <span class="title class_">HTMLFieldSetElement</span>;</span><br><span class="line">    <span class="string">&quot;figcaption&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;figure&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;font&quot;</span>: <span class="title class_">HTMLFontElement</span>;</span><br><span class="line">    <span class="string">&quot;footer&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;form&quot;</span>: <span class="title class_">HTMLFormElement</span>;</span><br><span class="line">    <span class="string">&quot;frame&quot;</span>: <span class="title class_">HTMLFrameElement</span>;</span><br><span class="line">    <span class="string">&quot;frameset&quot;</span>: <span class="title class_">HTMLFrameSetElement</span>;</span><br><span class="line">    <span class="string">&quot;h1&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h2&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h3&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h4&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h5&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h6&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;head&quot;</span>: <span class="title class_">HTMLHeadElement</span>;</span><br><span class="line">    <span class="string">&quot;header&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;hgroup&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;hr&quot;</span>: <span class="title class_">HTMLHRElement</span>;</span><br><span class="line">    <span class="string">&quot;html&quot;</span>: <span class="title class_">HTMLHtmlElement</span>;</span><br><span class="line">    <span class="string">&quot;i&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;iframe&quot;</span>: <span class="title class_">HTMLIFrameElement</span>;</span><br><span class="line">    <span class="string">&quot;img&quot;</span>: <span class="title class_">HTMLImageElement</span>;</span><br><span class="line">    <span class="string">&quot;input&quot;</span>: <span class="title class_">HTMLInputElement</span>;</span><br><span class="line">    <span class="string">&quot;ins&quot;</span>: <span class="title class_">HTMLModElement</span>;</span><br><span class="line">    <span class="string">&quot;kbd&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;label&quot;</span>: <span class="title class_">HTMLLabelElement</span>;</span><br><span class="line">    <span class="string">&quot;legend&quot;</span>: <span class="title class_">HTMLLegendElement</span>;</span><br><span class="line">    <span class="string">&quot;li&quot;</span>: <span class="title class_">HTMLLIElement</span>;</span><br><span class="line">    <span class="string">&quot;link&quot;</span>: <span class="title class_">HTMLLinkElement</span>;</span><br><span class="line">    <span class="string">&quot;main&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;map&quot;</span>: <span class="title class_">HTMLMapElement</span>;</span><br><span class="line">    <span class="string">&quot;mark&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;marquee&quot;</span>: <span class="title class_">HTMLMarqueeElement</span>;</span><br><span class="line">    <span class="string">&quot;menu&quot;</span>: <span class="title class_">HTMLMenuElement</span>;</span><br><span class="line">    <span class="string">&quot;meta&quot;</span>: <span class="title class_">HTMLMetaElement</span>;</span><br><span class="line">    <span class="string">&quot;meter&quot;</span>: <span class="title class_">HTMLMeterElement</span>;</span><br><span class="line">    <span class="string">&quot;nav&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;noscript&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;object&quot;</span>: <span class="title class_">HTMLObjectElement</span>;</span><br><span class="line">    <span class="string">&quot;ol&quot;</span>: <span class="title class_">HTMLOListElement</span>;</span><br><span class="line">    <span class="string">&quot;optgroup&quot;</span>: <span class="title class_">HTMLOptGroupElement</span>;</span><br><span class="line">    <span class="string">&quot;option&quot;</span>: <span class="title class_">HTMLOptionElement</span>;</span><br><span class="line">    <span class="string">&quot;output&quot;</span>: <span class="title class_">HTMLOutputElement</span>;</span><br><span class="line">    <span class="string">&quot;p&quot;</span>: <span class="title class_">HTMLParagraphElement</span>;</span><br><span class="line">    <span class="string">&quot;param&quot;</span>: <span class="title class_">HTMLParamElement</span>;</span><br><span class="line">    <span class="string">&quot;picture&quot;</span>: <span class="title class_">HTMLPictureElement</span>;</span><br><span class="line">    <span class="string">&quot;pre&quot;</span>: <span class="title class_">HTMLPreElement</span>;</span><br><span class="line">    <span class="string">&quot;progress&quot;</span>: <span class="title class_">HTMLProgressElement</span>;</span><br><span class="line">    <span class="string">&quot;q&quot;</span>: <span class="title class_">HTMLQuoteElement</span>;</span><br><span class="line">    <span class="string">&quot;rp&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;rt&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;ruby&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;s&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;samp&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;script&quot;</span>: <span class="title class_">HTMLScriptElement</span>;</span><br><span class="line">    <span class="string">&quot;section&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;select&quot;</span>: <span class="title class_">HTMLSelectElement</span>;</span><br><span class="line">    <span class="string">&quot;slot&quot;</span>: <span class="title class_">HTMLSlotElement</span>;</span><br><span class="line">    <span class="string">&quot;small&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: <span class="title class_">HTMLSourceElement</span>;</span><br><span class="line">    <span class="string">&quot;span&quot;</span>: <span class="title class_">HTMLSpanElement</span>;</span><br><span class="line">    <span class="string">&quot;strong&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;style&quot;</span>: <span class="title class_">HTMLStyleElement</span>;</span><br><span class="line">    <span class="string">&quot;sub&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;summary&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;sup&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;table&quot;</span>: <span class="title class_">HTMLTableElement</span>;</span><br><span class="line">    <span class="string">&quot;tbody&quot;</span>: <span class="title class_">HTMLTableSectionElement</span>;</span><br><span class="line">    <span class="string">&quot;td&quot;</span>: <span class="title class_">HTMLTableDataCellElement</span>;</span><br><span class="line">    <span class="string">&quot;template&quot;</span>: <span class="title class_">HTMLTemplateElement</span>;</span><br><span class="line">    <span class="string">&quot;textarea&quot;</span>: <span class="title class_">HTMLTextAreaElement</span>;</span><br><span class="line">    <span class="string">&quot;tfoot&quot;</span>: <span class="title class_">HTMLTableSectionElement</span>;</span><br><span class="line">    <span class="string">&quot;th&quot;</span>: <span class="title class_">HTMLTableHeaderCellElement</span>;</span><br><span class="line">    <span class="string">&quot;thead&quot;</span>: <span class="title class_">HTMLTableSectionElement</span>;</span><br><span class="line">    <span class="string">&quot;time&quot;</span>: <span class="title class_">HTMLTimeElement</span>;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="title class_">HTMLTitleElement</span>;</span><br><span class="line">    <span class="string">&quot;tr&quot;</span>: <span class="title class_">HTMLTableRowElement</span>;</span><br><span class="line">    <span class="string">&quot;track&quot;</span>: <span class="title class_">HTMLTrackElement</span>;</span><br><span class="line">    <span class="string">&quot;u&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;ul&quot;</span>: <span class="title class_">HTMLUListElement</span>;</span><br><span class="line">    <span class="string">&quot;var&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;video&quot;</span>: <span class="title class_">HTMLVideoElement</span>;</span><br><span class="line">    <span class="string">&quot;wbr&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><h3 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h3>   <figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//1.在TypeScript是不允许直接在constructor 定义变量的 需要在constructor上面先声明</span></span><br><span class="line">    <span class="comment">//2.你如果了定义了变量不用 也会报错 通常是给个默认值 或者 进行赋值</span></span><br><span class="line">    <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">lastName</span>: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h3><p>   public、private、protected</p>   <figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.使用public 修饰符 可以让你定义的变量 内部访问 也可以外部访问 如果不写默认就是public</span></span><br><span class="line"><span class="comment">//2.使用private 修饰符 可以让你定义的变量 内部访问 不可以外部访问</span></span><br><span class="line"><span class="comment">//3.使用protected 修饰符 代表定义的变量私有的只能在内部和继承的子类中访问 不能在外部访问</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//1.在TypeScript是不允许直接在constructor 定义变量的 需要在constructor上面先声明</span></span><br><span class="line">    <span class="comment">//2.你如果了定义了变量不用 也会报错 通常是给个默认值 或者 进行赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">some</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, some: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">some</span> = some;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">some</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">create</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">some</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lisi = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br></pre></td></tr></table></figure><h3 id="static-静态属性和静态方法"><a href="#static-静态属性和静态方法" class="headerlink" title="static 静态属性和静态方法"></a>static 静态属性和静态方法</h3>   <figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. static 定义的属性 不可以通过this 去访问 只能通过类名去调用</span></span><br><span class="line"><span class="comment">//2. static 静态函数 同样也是不能通过this 去调用 也是通过类名去调用</span></span><br><span class="line"><span class="comment">//3. 如果两个函数都是static 静态的是可以通过this互相调用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">some</span>: <span class="built_in">any</span></span><br><span class="line">    <span class="keyword">static</span> <span class="attr">nb</span>: <span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span> </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, some: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">some</span> = some</span><br><span class="line">        <span class="comment">//this.nb = &#x27;123&#x27;</span></span><br><span class="line">        <span class="comment">//this.run()</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">aaa</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">aaa</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">nb</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">run</span>()</span><br></pre></td></tr></table></figure><h3 id="Interface-定义-类"><a href="#Interface-定义-类" class="headerlink" title="Interface 定义 类"></a>Interface 定义 类</h3>   <figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ts interface 定义类 使用关键字 implements   后面跟interface的名字多个用逗号隔开 继承还是用extends </span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonClass</span> &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="attr">type</span>: <span class="built_in">boolean</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonClass2</span>&#123;</span><br><span class="line">    <span class="title function_">set</span>():<span class="built_in">void</span>,</span><br><span class="line">    <span class="attr">asd</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> <span class="keyword">implements</span> <span class="title class_">PersonClass</span>,<span class="title class_">PersonClass2</span> &#123;</span><br><span class="line">    <span class="attr">asd</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">asd</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"><span class="keyword">type</span>:<span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">type</span></span><br><span class="line">    &#125;</span><br><span class="line">    set () &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3>   <figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应用场景如果你写的类实例化之后毫无用处此时我可以把他定义为抽象类</span></span><br><span class="line"><span class="comment">//或者也可以把他作为一个基类-&gt; 通过继承一个派生类去实现基类的一些方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们在A类定义了 getName 抽象方法但未实现</span></span><br><span class="line"><span class="comment">//我们B类实现了A定义的抽象方法 如不实现就不报错 我们定义的抽象方法必须在派生类实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">print</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">getName</span>(): <span class="built_in">string</span></span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">super</span>(<span class="string">&#x27;小满&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">let</span> b1 = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line">  </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(b1.<span class="title function_">getName</span>());</span><br></pre></td></tr></table></figure><h2 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h2><h3 id="元组就是数组的变种"><a href="#元组就是数组的变种" class="headerlink" title="元组就是数组的变种"></a>元组就是数组的变种</h3><p>   <strong>元组（Tuple）是固定数量的不同类型的元素的组合</strong>。</p>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元组与集合的不同之处在于，元组中的元素类型可以是不同的，而且数量固定。元组的好处在于可以把多个元素作为一个单元传递。如果一个方法需要返回多个值，可以把这多个值作为元组返回，而不需要创建额外的类来表示。</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:[<span class="built_in">number</span>,<span class="built_in">string</span>] = [<span class="number">1</span>,<span class="string">&#x27;string&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="keyword">readonly</span> [<span class="built_in">number</span>,<span class="built_in">boolean</span>,<span class="built_in">string</span>,<span class="literal">undefined</span>] = [<span class="number">1</span>,<span class="literal">true</span>,<span class="string">&#x27;sring&#x27;</span>,<span class="literal">undefined</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//当赋值或访问一个已知索引的元素时，会得到正确的类型：</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:[<span class="built_in">number</span>,<span class="built_in">string</span>] = [<span class="number">1</span>,<span class="string">&#x27;string&#x27;</span>]</span><br><span class="line">arr[<span class="number">0</span>].<span class="property">length</span> <span class="comment">//error</span></span><br><span class="line">arr[<span class="number">1</span>].<span class="property">length</span> <span class="comment">//success</span></span><br><span class="line"><span class="comment">//数字是没有length 的</span></span><br></pre></td></tr></table></figure><h3 id="越界元素"><a href="#越界元素" class="headerlink" title="越界元素"></a>越界元素</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于越界的元素他的类型被限制为 联合类型（就是你在元组中定义的类型）如下图</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:[<span class="built_in">number</span>,<span class="built_in">string</span>] = [<span class="number">1</span>,<span class="string">&#x27;string&#x27;</span>]</span><br><span class="line"> </span><br><span class="line">arr.<span class="title function_">push</span>(<span class="literal">true</span>)<span class="comment">//error</span></span><br></pre></td></tr></table></figure><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><h3 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写就可以实现应为ts定义的枚举中的每一个组员默认都是从0开始的所以也就是</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="number">0</span>,</span><br><span class="line">   <span class="title class_">Green</span> = <span class="number">1</span>,</span><br><span class="line">   <span class="title class_">BLue</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认就是从0开始的 可以不写值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//增长枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">   <span class="title class_">Green</span>,</span><br><span class="line">   <span class="title class_">BLue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串枚举的概念很简单。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">   <span class="title class_">Green</span> = <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">   <span class="title class_">BLue</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。 换句话说，如果你正在调试并且必须要读一个数字枚举的运行时的值，这个值通常是很难读的 - 它并不能表达有用的信息，字符串枚举允许你提供一个运行时有意义的并且可读的值，独立于枚举成员的名字。</span></span><br></pre></td></tr></table></figure><h3 id="异构枚举"><a href="#异构枚举" class="headerlink" title="异构枚举"></a>异构枚举</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举可以混合字符串和数字成员</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">No</span> = <span class="string">&quot;No&quot;</span>,</span><br><span class="line">   <span class="title class_">Yes</span> = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口枚举"><a href="#接口枚举" class="headerlink" title="接口枚举"></a>接口枚举</h3>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">   yyds,</span><br><span class="line">   dddd</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">   <span class="attr">red</span>:<span class="title class_">Types</span>.<span class="property">yyds</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:A = &#123;</span><br><span class="line">   <span class="attr">red</span>:<span class="title class_">Types</span>.<span class="property">yyds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const枚举"><a href="#const枚举" class="headerlink" title="const枚举"></a>const枚举</h3><p>   let  和 var 都是不允许的声明只能使用const</p><p>   大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用 const枚举。 常量枚举通过在枚举上使用 const修饰符来定义</p><ul><li><p>const 声明的枚举会被编译成常量</p></li><li><p>普通声明的枚举编译完后是个对象</p></li></ul>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">No</span> = <span class="string">&quot;No&quot;</span>,</span><br><span class="line">   <span class="title class_">Yes</span> = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反向映射"><a href="#反向映射" class="headerlink" title="反向映射"></a>反向映射</h3><p>   它包含了正向映射（ <code>name</code> -&gt; <code>value</code>）和反向映射（ <code>value</code> -&gt; <code>name</code>）</p><p>   要注意的是 <em>不会</em>为字符串枚举成员生成反向映射。</p>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Enum</span> &#123;</span><br><span class="line">   fall</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Enum</span>.<span class="property">fall</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//0</span></span><br><span class="line"><span class="keyword">let</span> nameOfA = <span class="title class_">Enum</span>[a]; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameOfA); <span class="comment">//fall</span></span><br></pre></td></tr></table></figure><h2 id="类型推论-类型别名"><a href="#类型推论-类型别名" class="headerlink" title="类型推论 | 类型别名"></a>类型推论 | 类型别名</h2><h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><ol><li><p>声明了一个变量，但是没有定义类型；TypeScript会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</p></li><li><p>声明变量没有定义类型也没有赋值，这时候TypeScript会推断成any类型可以进行任何操</p></li></ol><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>   type关键字（可以给一个类型定义一个名字）多用于符合类型</p><ol><li><p>定义类型别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>:str = <span class="string">&quot;我是张三&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure></li><li><p>定义函数别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: str = <span class="function">() =&gt;</span> <span class="string">&quot;我是张三&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure></li><li><p>定义联合类型别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: str = <span class="number">123</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s2</span>: str = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s,s2);</span><br></pre></td></tr></table></figure></li><li><p>定义值的别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> value = <span class="built_in">boolean</span> | <span class="number">0</span> | <span class="string">&#x27;213&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>:value = <span class="literal">true</span></span><br><span class="line"><span class="comment">//变量s的值  只能是上面value定义的值</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h2><p>TypeScript将使用never类型来表示不应该存在的状态</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为必定抛出异常，所以 error 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为存在死循环，所以 loop 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">never</span> 与 <span class="built_in">void</span> 的差异</span><br><span class="line"><span class="comment">//void类型只是没有返回值 但本身不会出错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Void</span>(<span class="params"></span>):<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只会抛出异常没有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Never</span>(<span class="params"></span>):<span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="symbol类型"><a href="#symbol类型" class="headerlink" title="symbol类型"></a>symbol类型</h2><h3 id="symbol类型的值是通过Symbol构造函数创建的"><a href="#symbol类型的值是通过Symbol构造函数创建的" class="headerlink" title="symbol类型的值是通过Symbol构造函数创建的"></a>symbol类型的值是通过Symbol构造函数创建的</h3><pre><code><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 可以传递参数作为唯一标识，只支持string和number类型的参数</span></span><br><span class="line"><span class="keyword">let</span> sym1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>); <span class="comment">// 可选的字符串key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. Symbol的值是唯一的</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="comment">// s1 === s2 =&gt;false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 作为对象属性的键</span></span><br><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [sym]: <span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[sym]); <span class="comment">// &quot;value&quot;</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="取symbol定义的属性"><a href="#取symbol定义的属性" class="headerlink" title="取symbol定义的属性"></a>取symbol定义的属性</h3><pre><code><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下方式无法拿到</span></span><br><span class="line"><span class="keyword">const</span> symbol1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;666&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;777&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> obj1= &#123;</span><br><span class="line">    [symbol1]: <span class="string">&#x27;小满&#x27;</span>,</span><br><span class="line">    [symbol2]: <span class="string">&#x27;二蛋&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 for in 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    <span class="comment">// 注意在console看key,是不是没有遍历到symbol1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 Object.keys 遍历</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1))</span><br><span class="line"><span class="comment">// 3 getOwnPropertyNames</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj1))</span><br><span class="line"><span class="comment">// 4 JSON.stringfy</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1))</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以拿到</span></span><br><span class="line"><span class="comment">// 1 拿到具体的symbol 属性,对象中有几个就会拿到几个</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj1))</span><br><span class="line"><span class="comment">// 2 es6 的 Reflect 拿到对象的所有属性</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj1))</span><br></pre></td></tr></table></figure></code></pre><h3 id="Symbol-iterator-迭代器-和-生成器-for-of"><a href="#Symbol-iterator-迭代器-和-生成器-for-of" class="headerlink" title="Symbol.iterator 迭代器 和 生成器 for of"></a>Symbol.iterator 迭代器 和 生成器 for of</h3><pre><code><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代器</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 4, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试用例</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">array</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Item</span>&gt; = [</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">123</span>, <span class="attr">name</span>: <span class="string">&quot;1&quot;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">123</span>, <span class="attr">name</span>: <span class="string">&quot;2&quot;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">123</span>, <span class="attr">name</span>: <span class="string">&quot;3&quot;</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> mapTypes = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">map</span>:<span class="title class_">Map</span>&lt;mapTypes,mapTypes&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;王爷&#x27;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;陆北&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">aaa</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="attr">bbb</span>:<span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">set</span>:<span class="title class_">Set</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="comment">// let it:Iterator&lt;Item&gt; = array[Symbol.iterator]()</span></span><br><span class="line"><span class="keyword">const</span> gen = (<span class="attr">erg</span>:<span class="built_in">any</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">it</span>: <span class="title class_">Iterator</span>&lt;<span class="built_in">any</span>&gt; = erg[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">next</span>:<span class="built_in">any</span>= &#123; <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">while</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">        next =  it.<span class="title function_">next</span>()</span><br><span class="line">        <span class="keyword">if</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(next.<span class="property">value</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">gen</span>(array)</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><blockquote><p>以下为这些symbols的列表：</p><p><strong>Symbol.hasInstance</strong></p><p>方法，会被instanceof运算符调用。构造器对象用来识别一个对象是否是其实例。</p><p><strong>Symbol.isConcatSpreadable</strong></p><p>布尔值，表示当在一个对象上调用Array.prototype.concat时，这个对象的数组元素是否可展开。</p><p><strong>Symbol.iterator</strong></p><p>方法，被for-of语句调用。返回对象的默认迭代器。</p><p><strong>Symbol.match</strong></p><p>方法，被String.prototype.match调用。正则表达式用来匹配字符串。</p><p><strong>Symbol.replace</strong></p><p>方法，被String.prototype.replace调用。正则表达式用来替换字符串中匹配的子串。</p><p><strong>Symbol.search</strong></p><p>方法，被String.prototype.search调用。正则表达式返回被匹配部分在字符串中的索引。</p><p><strong>Symbol.species</strong></p><p>函数值，为一个构造函数。用来创建派生对象。</p><p><strong>Symbol.split</strong></p><p>方法，被String.prototype.split调用。正则表达式来用分割字符串。</p><p><strong>Symbol.toPrimitive</strong></p><p>方法，被ToPrimitive抽象操作调用。把对象转换为相应的原始值。</p><p><strong>Symbol.toStringTag</strong></p><p>方法，被内置方法Object.prototype.toString调用。返回创建对象时默认的字符串描述。</p><p><strong>Symbol.unscopables</strong></p><p>对象，它自己拥有的属性会被with作用域排除在外。</p></blockquote><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型在TypeScript 是很重要的东西 例如vue3 是用ts编写的 里面用到了非常多的泛型</p><h3 id="函数泛型"><a href="#函数泛型" class="headerlink" title="函数泛型"></a>函数泛型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基础用法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">num</span> (<span class="attr">a</span>:<span class="built_in">number</span>,<span class="attr">b</span>:<span class="built_in">number</span>) : <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> [a ,b];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">num</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">str</span> (<span class="attr">a</span>:<span class="built_in">string</span>,<span class="attr">b</span>:<span class="built_in">string</span>) : <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> [a ,b];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">str</span>(<span class="string">&#x27;独孤&#x27;</span>,<span class="string">&#x27;求败&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态类型</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title class_">Add</span>&lt;T&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: T): <span class="title class_">Array</span>&lt;T&gt;  &#123;</span><br><span class="line">      <span class="keyword">return</span> [a,b]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Add</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">  <span class="title class_">Add</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="comment">//也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">Sub</span>&lt;T,U&gt;(<span class="attr">a</span>:T,<span class="attr">b</span>:U):<span class="title class_">Array</span>&lt;T|U&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">params</span>:<span class="title class_">Array</span>&lt;T|U&gt; = [a,b]</span><br><span class="line">    <span class="keyword">return</span> params</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Sub</span>&lt;<span class="title class_">Boolean</span>,<span class="built_in">number</span>&gt;(<span class="literal">false</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="定义泛型接口"><a href="#定义泛型接口" class="headerlink" title="定义泛型接口"></a>定义泛型接口</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明接口的时候 在名字后面加一个&lt;参数&gt;</span></span><br><span class="line"><span class="comment">//使用的时候传递类型</span></span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">MyInter</span>&lt;T&gt; &#123;</span><br><span class="line">     (<span class="attr">arg</span>: T): T</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">     <span class="keyword">return</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">result</span>: <span class="title class_">MyInter</span>&lt;<span class="built_in">number</span>&gt; = fn</span><br><span class="line"></span><br><span class="line">  <span class="title function_">result</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h3 id="对象字面量泛型"><a href="#对象字面量泛型" class="headerlink" title="对象字面量泛型"></a>对象字面量泛型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">foo</span>: &#123; &lt;T&gt;(<span class="attr">arg</span>: T): T &#125;</span><br><span class="line"> </span><br><span class="line">foo = <span class="keyword">function</span> &lt;T&gt;(<span class="attr">arg</span>:T):T &#123;</span><br><span class="line">   <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">foo</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对使用的泛型进行约束，我们约束其为具有length属性的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Len</span> &#123;</span><br><span class="line">   <span class="attr">length</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> getLegnth&lt;T <span class="keyword">extends</span> <span class="title class_">Len</span>&gt;(<span class="attr">arg</span>:T) &#123;</span><br><span class="line">  <span class="keyword">return</span> arg.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">getLegnth&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="使用-key-of-约束对象"><a href="#使用-key-of-约束对象" class="headerlink" title="使用 key of 约束对象"></a>使用 key of 约束对象</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其中使用了TS泛型和泛型约束。首先定义了T类型并使用extends关键字继承object类型的子类型，然后使用keyof操作符获取T类型的所有键，它的返回 类型是联合 类型，最后利用extends关键字约束 K类型必须为keyof T联合类型的子类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> prop&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K) &#123;</span><br><span class="line">   <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">prop</span>(o, <span class="string">&#x27;a&#x27;</span>) </span><br><span class="line"><span class="title function_">prop</span>(o, <span class="string">&#x27;d&#x27;</span>) <span class="comment">//此时就会报错发现找不到</span></span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明方法跟函数类似名称后面定义&lt;类型&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用的时候确定类型new Sub&lt;number&gt;()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span>&lt;T&gt;&#123;</span><br><span class="line">   <span class="attr">attr</span>: T[] = [];</span><br><span class="line">   add (<span class="attr">a</span>:T):T[] &#123;</span><br><span class="line">      <span class="keyword">return</span> [a]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Sub</span>&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">s.<span class="property">attr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">123</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> str = <span class="keyword">new</span> <span class="title class_">Sub</span>&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line">str.<span class="property">attr</span> = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">str.<span class="title function_">add</span>(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h2><p>这个文件是通过<code>tsc --init</code>命令生成的</p><h3 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;incremental&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度</span></span><br><span class="line">  <span class="attr">&quot;tsBuildInfoFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./buildFile&quot;</span><span class="punctuation">,</span> <span class="comment">// 增量编译文件的存储位置</span></span><br><span class="line">  <span class="attr">&quot;diagnostics&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 打印诊断信息 </span></span><br><span class="line">  <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES5&quot;</span><span class="punctuation">,</span> <span class="comment">// 目标语言的版本</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CommonJS&quot;</span><span class="punctuation">,</span> <span class="comment">// 生成代码的模板标准</span></span><br><span class="line">  <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./app.js&quot;</span><span class="punctuation">,</span> <span class="comment">// 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置&quot;module&quot;: &quot;AMD&quot;,</span></span><br><span class="line">  <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;DOM&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ScriptHost&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ES2019.Array&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入&quot;ES2019.Array&quot;,</span></span><br><span class="line">  <span class="attr">&quot;allowJS&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 允许编译器编译JS，JSX文件</span></span><br><span class="line">  <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 允许在JS文件中报错，通常与allowJS一起使用</span></span><br><span class="line">  <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定输出目录</span></span><br><span class="line">  <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定输出文件目录(用于输出)，用于控制输出目录结构</span></span><br><span class="line">  <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 生成声明文件，开启后会自动生成声明文件</span></span><br><span class="line">  <span class="attr">&quot;declarationDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./file&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定生成声明文件存放目录</span></span><br><span class="line">  <span class="attr">&quot;emitDeclarationOnly&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 只生成声明文件，而不会生成js文件</span></span><br><span class="line">  <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 生成目标文件的sourceMap文件</span></span><br><span class="line">  <span class="attr">&quot;inlineSourceMap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中</span></span><br><span class="line">  <span class="attr">&quot;declarationMap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 为声明文件生成sourceMap</span></span><br><span class="line">  <span class="attr">&quot;typeRoots&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 声明文件目录，默认时node_modules/@types</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 加载的声明文件包</span></span><br><span class="line">  <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 删除注释 </span></span><br><span class="line">  <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 不输出文件,即编译后不会生成任何js文件</span></span><br><span class="line">  <span class="attr">&quot;noEmitOnError&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 发送错误时不输出任何文件</span></span><br><span class="line">  <span class="attr">&quot;noEmitHelpers&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用</span></span><br><span class="line">  <span class="attr">&quot;importHelpers&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 通过tslib引入helper函数，文件必须是模块</span></span><br><span class="line">  <span class="attr">&quot;downlevelIteration&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现</span></span><br><span class="line">  <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 开启所有严格的类型检查</span></span><br><span class="line">  <span class="attr">&quot;alwaysStrict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 在代码中注入&#x27;use strict&#x27;</span></span><br><span class="line">  <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 不允许隐式的any类型</span></span><br><span class="line">  <span class="attr">&quot;strictNullChecks&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 不允许把null、undefined赋值给其他类型的变量</span></span><br><span class="line">  <span class="attr">&quot;strictFunctionTypes&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 不允许函数参数双向协变</span></span><br><span class="line">  <span class="attr">&quot;strictPropertyInitialization&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 类的实例属性必须初始化</span></span><br><span class="line">  <span class="attr">&quot;strictBindCallApply&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 严格的bind/call/apply检查</span></span><br><span class="line">  <span class="attr">&quot;noImplicitThis&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 不允许this有隐式的any类型</span></span><br><span class="line">  <span class="attr">&quot;noUnusedLocals&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 检查只声明、未使用的局部变量(只提示不报错)</span></span><br><span class="line">  <span class="attr">&quot;noUnusedParameters&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 检查未使用的函数参数(只提示不报错)</span></span><br><span class="line">  <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 防止switch语句贯穿(即如果没有break语句后面不会执行)</span></span><br><span class="line">  <span class="attr">&quot;noImplicitReturns&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">//每个分支都会有返回值</span></span><br><span class="line">  <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 允许export=导出，由import from 导入</span></span><br><span class="line">  <span class="attr">&quot;allowUmdGlobalAccess&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 允许在模块中全局变量的方式访问umd模块</span></span><br><span class="line">  <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span> <span class="comment">// 模块解析策略，ts默认用node的解析策略，即相对的方式导入</span></span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 解析非相对模块的基地址，默认是当前目录</span></span><br><span class="line">  <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 路径映射，相对于baseUrl</span></span><br><span class="line">    <span class="comment">// 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置</span></span><br><span class="line">    <span class="attr">&quot;jquery&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules/jquery/dist/jquery.min.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rootDirs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">,</span><span class="string">&quot;out&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错</span></span><br><span class="line">  <span class="attr">&quot;listEmittedFiles&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 打印输出文件</span></span><br><span class="line">  <span class="attr">&quot;listFiles&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="comment">// 打印编译的文件(包括引用的声明文件)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）</span></span><br><span class="line"><span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="string">&quot;src/**/*&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 指定一个排除列表（include的反向操作）</span></span><br><span class="line"> <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="string">&quot;demo.ts&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 指定哪些文件使用该配置（属于手动一个个指定文件）</span></span><br><span class="line"> <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="string">&quot;demo.ts&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="常用的"><a href="#常用的" class="headerlink" title="常用的"></a>常用的</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>include</span><br><span class="line">指定编译文件默认是编译当前目录下所有的ts文件</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>exclude</span><br><span class="line">指定排除的文件</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>target</span><br><span class="line">指定编译js 的版本例如es5  es6</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>allowJS</span><br><span class="line">是否允许编译js文件</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>removeComments</span><br><span class="line">是否在编译过程中删除文件中的注释</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>rootDir</span><br><span class="line">编译文件的目录</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>outDir</span><br><span class="line">输出的目录</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>sourceMap</span><br><span class="line">代码源文件</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>strict</span><br><span class="line">严格模式</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>module</span><br><span class="line">默认common.js  可选es6模式 amd  umd 等</span><br></pre></td></tr></table></figure><h2 id="namespace命名空间"><a href="#namespace命名空间" class="headerlink" title="namespace命名空间"></a>namespace命名空间</h2><p>我们在工作中无法避免全局变量造成的污染，TypeScript提供了namespace 避免这个问题出现</p><ul><li>内部模块，主要用于组织代码，避免命名冲突。</li><li>命名空间内的类默认私有</li><li>通过 <code>export</code> 暴露</li><li>通过 <code>namespace</code> 关键字定义</li></ul><p>TypeScript与ECMAScript 2015一样，任何包含顶级<code>import</code>或者<code>export</code>的文件都被当成一个模块。相反地，如果一个文件不带有顶级的<code>import</code>或者<code>export</code>声明，那么它的内容被视为全局可见的（因此对模块也是可见的）</p><p>Export 将想要暴露的部分导出</p><p>如果不用export导出是无法读取其值的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A.<span class="property">a</span>)</span><br></pre></td></tr></table></figure><p>嵌套命名空间</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">namespace</span> B &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A.<span class="property">B</span>.<span class="property">b</span>)</span><br></pre></td></tr></table></figure><p>抽离命名空间</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> V &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//b.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;V&#125; <span class="keyword">from</span> <span class="string">&#x27;../observer/index&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(V);</span><br></pre></td></tr></table></figure><p>简化命名空间</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A  &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> B &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">const</span> C = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> X = A.<span class="property">B</span>.<span class="property">C</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(X);</span><br></pre></td></tr></table></figure><p>合并命名空间</p><p>重名的命名空间会合并</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A  &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> A  &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> d = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A.<span class="property">b</span>, A.<span class="property">d</span>);</span><br></pre></td></tr></table></figure><h2 id="三斜线指令"><a href="#三斜线指令" class="headerlink" title="三斜线指令"></a>三斜线指令</h2><p><code>/// &lt;reference path=&quot;...&quot; /&gt;</code>指令是三斜线指令中最常见的一种。 它用于声明文件间的 <em>依赖</em>。</p><p>你也可以把它理解成<code>import</code>，它可以告诉编译器在编译过程中要引入的额外的文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.ts</span></span><br><span class="line"><span class="keyword">namespace</span> A  &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.ts</span></span><br><span class="line"><span class="comment">///&lt;reference path=&quot;./a.ts&quot; /&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A.<span class="property">b</span>)</span><br></pre></td></tr></table></figure><p>声明文件引入</p><p>例如，把 <code>/// &lt;reference types=&quot;node&quot; /&gt;</code>引入到声明文件，表明这个文件使用了 <code>@types/node/index.d.ts</code>里面声明的名字； 并且，这个包需要在编译阶段与声明文件一起被包含进来。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference types=&quot;node&quot; /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><p>如果你在配置文件 配置了noResolve 或者自身调用自身文件会报错</p></blockquote><h2 id="声明文件d-ts"><a href="#声明文件d-ts" class="headerlink" title="声明文件d.ts"></a>声明文件d.ts</h2><p>声明文件 declare</p><p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> 声明全局变量</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> 声明全局方法</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> 声明全局类</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> 声明全局枚举类型</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> 声明（含有子属性的）全局对象</span><br><span class="line">interface 和 type 声明全局类型</span><br><span class="line">/// &lt;reference /&gt; 三斜线指令</span><br></pre></td></tr></table></figure><h2 id="Mixins混入"><a href="#Mixins混入" class="headerlink" title="Mixins混入"></a>Mixins混入</h2><p>TypeScript 混入 Mixins 其实vue也有mixins这个东西 你可以把他看作为合并</p><h3 id="对象混入"><a href="#对象混入" class="headerlink" title="对象混入"></a>对象混入</h3><p>可以使用es6的Object.assign合并多个对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此时people 会被推断成一个交差类型 Name &amp; Age &amp; sex;</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Age</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Sex</span> &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">people1</span>: <span class="title class_">Name</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;小满&quot;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">people2</span>: <span class="title class_">Age</span> = &#123; <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">people3</span>: <span class="title class_">Sex</span> = &#123; <span class="attr">sex</span>: <span class="number">1</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> people = <span class="title class_">Object</span>.<span class="title function_">assign</span>(people1,people2,people3)</span><br></pre></td></tr></table></figure><h3 id="类的混入"><a href="#类的混入" class="headerlink" title="类的混入"></a>类的混入</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="title function_">changeType</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = !<span class="variable language_">this</span>.<span class="property">type</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">    <span class="title function_">getName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> A,B&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="built_in">boolean</span></span><br><span class="line">    <span class="attr">changeType</span>:<span class="function">()=&gt;</span><span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">getName</span>:<span class="function">()=&gt;</span> <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Mixins</span>(C, [A, B])</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Mixins</span>(<span class="params">curCls: <span class="built_in">any</span>, itemCls: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">    itemCls.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(item.<span class="property"><span class="keyword">prototype</span></span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            curCls.<span class="property"><span class="keyword">prototype</span></span>[name] = item.<span class="property"><span class="keyword">prototype</span></span>[name]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Object.getOwnPropertyNames()可以获取对象自身的属性，除去他继承来的属性，对它所有的属性遍历，它是一个数组，遍历一下它所有的属性</span></span><br></pre></td></tr></table></figure><h2 id="装饰器Decorator"><a href="#装饰器Decorator" class="headerlink" title="装饰器Decorator"></a>装饰器Decorator</h2><p>Decorator装饰器是一项试验性特性，在未来的版本中可能会发生改变</p><p>它们不仅增加了代码的可读性，清晰地表达了意图，而且提供一种方便的手段，增加或修改类的功能</p><p>若要启用实验性的装饰器特性，你必须在命令行或<code>tsconfig.json</code>里启用编译器选项</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法，访问符，属性或参数上</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先定义一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个类装饰器函数 他会把ClassA的 构造函数 传入你的watcher函数当做第一个参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">watcher</span>: <span class="title class_">ClassDecorator</span> = <span class="function">(<span class="params">target: <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">    target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getParams</span> = &lt;T&gt;(<span class="attr">params</span>: T):<span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> params</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用的时候 直接通过@函数名使用</span></span><br><span class="line"><span class="meta">@watcher</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//验证</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((a <span class="keyword">as</span> <span class="built_in">any</span>).<span class="title function_">getParams</span>(<span class="string">&#x27;123&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="装饰器工厂"><a href="#装饰器工厂" class="headerlink" title="装饰器工厂"></a>装饰器工厂</h3><p>其实也就是一个高阶函数 外层的函数接受值 里层的函数最终接受类的构造函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> watcher = (<span class="attr">name</span>: <span class="built_in">string</span>): <span class="function"><span class="params">ClassDecorator</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">target: <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">        target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getParams</span> = &lt;T&gt;(<span class="attr">params</span>: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> params</span><br><span class="line">        &#125;</span><br><span class="line">        target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getOptions</span> = (): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@watcher</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((a <span class="keyword">as</span> <span class="built_in">any</span>).<span class="title function_">getParams</span>(<span class="string">&#x27;123&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="装饰器组合"><a href="#装饰器组合" class="headerlink" title="装饰器组合"></a>装饰器组合</h3><p>就是可以使用多个装饰器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> watcher = (<span class="attr">name</span>: <span class="built_in">string</span>): <span class="function"><span class="params">ClassDecorator</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">target: <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">        target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getParams</span> = &lt;T&gt;(<span class="attr">params</span>: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> params</span><br><span class="line">        &#125;</span><br><span class="line">        target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getOptions</span> = (): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> watcher2 = (<span class="attr">name</span>: <span class="built_in">string</span>): <span class="function"><span class="params">ClassDecorator</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">target: <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">        target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getNames</span> = ():<span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@watcher2</span>(<span class="string">&#x27;name2&#x27;</span>)</span><br><span class="line"><span class="meta">@watcher</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((a <span class="keyword">as</span> <span class="built_in">any</span>).<span class="title function_">getOptions</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((a <span class="keyword">as</span> <span class="built_in">any</span>).<span class="title function_">getNames</span>());</span><br></pre></td></tr></table></figure><h3 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h3><p>返回三个参数</p><ol><li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li><li>成员的名字。</li><li>成员的<em>属性描述符</em>。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  <span class="string">&#x27;setParasm&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">value</span>: [<span class="title class_">Function</span>: setParasm],</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">met</span>:<span class="title class_">MethodDecorator</span> = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@met</span></span><br><span class="line">    getName ():<span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;小满&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br></pre></td></tr></table></figure><h3 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h3><p>返回两个参数</p><ol><li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li><li>属性的名字。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[ &#123;&#125;, <span class="string">&#x27;name&#x27;</span>, <span class="literal">undefined</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">met</span>:<span class="title class_">PropertyDecorator</span> = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="meta">@met</span></span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br></pre></td></tr></table></figure><h3 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h3><p>返回三个参数</p><ol><li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li><li>成员的名字。</li><li>参数在函数参数列表中的索引。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[ &#123;&#125;, <span class="string">&#x27;setParasm&#x27;</span>, <span class="number">0</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">met</span>:<span class="title class_">ParameterDecorator</span> = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    setParasm (<span class="meta">@met</span> <span class="attr">name</span>:<span class="built_in">string</span> = <span class="string">&#x27;213&#x27;</span>) &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br></pre></td></tr></table></figure><h2 id="Rollup构建TS项目-amp-webpack构建TS项目"><a href="#Rollup构建TS项目-amp-webpack构建TS项目" class="headerlink" title="Rollup构建TS项目 &amp; webpack构建TS项目"></a>Rollup构建TS项目 &amp; webpack构建TS项目</h2><h3 id="Rollup构建TS项目"><a href="#Rollup构建TS项目" class="headerlink" title="Rollup构建TS项目"></a>Rollup构建TS项目</h3><p>安装依赖</p><ol><li>全局安装rollup npm install rollup-g</li><li>安装TypeScript   npm install typescript -D</li><li>安装TypeScript 转换器 npm install rollup-plugin-typescript2 -D</li><li>安装代码压缩插件 npm install rollup-plugin-terser -D</li><li>安装rollupweb服务 npm install rollup-plugin-serve -D</li><li>安装热更新 npm install rollup-plugin-livereload -D</li><li>引入外部依赖 npm install rollup-plugin-node-resolve -D</li><li>安装配置环境变量用来区分本地和生产  npm install cross-env -D</li><li>替换环境变量给浏览器使用 npm install rollup-plugin-replace -D</li></ol><h3 id="webpack构建TS项目"><a href="#webpack构建TS项目" class="headerlink" title="webpack构建TS项目"></a>webpack构建TS项目</h3><p>安装依赖</p><ol><li>安装webpack   npm install webpack -D</li><li>webpack4以上需要 npm install  webpack-cli -D</li><li>编译TS  npm install ts-loader -D</li><li>TS环境 npm install typescript -D</li><li>热更新服务 npm install  webpack-dev-server -D</li><li>HTML模板 npm install html-webpack-plugin -D</li></ol>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>portainer</title>
      <link href="/2022/06/23/portainer/"/>
      <url>/2022/06/23/portainer/</url>
      
        <content type="html"><![CDATA[<h1 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Debian10</li><li>Docker</li></ul><h2 id="安装portainer"><a href="#安装portainer" class="headerlink" title="安装portainer"></a>安装portainer</h2><p>2022年5月12日更新：</p><p>最新版本似乎镜像的内部端口更换了，建议用下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">9000</span>:<span class="number">9000</span> --restart=always --name portainer -v /<span class="keyword">var</span>/run/docker.sock:/<span class="keyword">var</span>/run/docker.sock portainer/portainer</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:8000 -p 9443:9443 --name portainer </span><br><span class="line">    --restart=always </span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock </span><br><span class="line">    -v /root/data/docker_data/portainer/data:/data </span><br><span class="line">    portainer/portainer-ce:latest</span><br></pre></td></tr></table></figure><p>旧版安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:8000 -p 9000:9000 --name portainer \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v /root/data/docker_data/portainer/data:/data \</span><br><span class="line">    cr.portainer.io/portainer/portainer-ce:2.11.0</span><br></pre></td></tr></table></figure><p>输入http:&#x2F;&#x2F;服务器ip地址:9000即可访问</p><blockquote><p>注意9000:9000，这边左边的9000可以修改成自己想要的端口号，只要没有被占用即可，右边的9000不要修改。</p><p>比如我想换成9001:9000</p></blockquote><p>检查端口是否被占用，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:9001</span><br></pre></td></tr></table></figure><p>如果没有任何提示，则说明端口未被使用，否则更换端口</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
          <category> Portainer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> portainer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 和 Docker-compose</title>
      <link href="/2022/06/22/Docker%E5%92%8Ccompose/"/>
      <url>/2022/06/22/Docker%E5%92%8Ccompose/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-和-Docker-compose"><a href="#Docker-和-Docker-compose" class="headerlink" title="Docker 和 Docker-compose"></a>Docker 和 Docker-compose</h1><h2 id="大陆服务器"><a href="#大陆服务器" class="headerlink" title="大陆服务器"></a>大陆服务器</h2><h3 id="国内机安装docker"><a href="#国内机安装docker" class="headerlink" title="国内机安装docker"></a>国内机安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line">或</span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><h3 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine</span><br><span class="line"><span class="built_in">rm</span> -fr /var/lib/docker/</span><br></pre></td></tr></table></figure><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/v2.1.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment">#若是github访问太慢，可以用daocloud下载</span></span><br><span class="line">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加可执行权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试安装结果</span></span><br><span class="line">$ docker-compose --version</span><br><span class="line"></span><br><span class="line"><span class="comment">#若都不行，pip安装</span></span><br><span class="line">sudo pip install docker-compose</span><br></pre></td></tr></table></figure><h2 id="海外服务器"><a href="#海外服务器" class="headerlink" title="海外服务器"></a>海外服务器</h2><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- get.docker.com | bash</span><br></pre></td></tr></table></figure><h3 id="卸载docker-1"><a href="#卸载docker-1" class="headerlink" title="卸载docker"></a>卸载docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge docker-ce docker-ce-cli containerd.io</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/docker</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/containerd</span><br></pre></td></tr></table></figure><h3 id="docker-componse安装"><a href="#docker-componse安装" class="headerlink" title="docker-componse安装"></a>docker-componse安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加可执行权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
          <category> Docker | Compose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA相关</title>
      <link href="/2022/06/22/JAVA%E7%9B%B8%E5%85%B3/"/>
      <url>/2022/06/22/JAVA%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><h2 id="hashCode-和equals-的关系"><a href="#hashCode-和equals-的关系" class="headerlink" title="hashCode()和equals()的关系"></a>hashCode()和equals()的关系</h2><ul><li><p>如果两个对象的hashCode不相同，那么这两个对象肯定不同</p></li><li><p>如果两个对象的hashCode相同，不代表两个对象一定是同一个对象，也可能是两个对象</p></li><li><p>如果两个对象相等，那么他们的hashCode就一定相同</p></li></ul><h2 id="String、StringBuffer、StringBuilder"><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h2><ul><li><p>String是不可变的，如果尝试修改，会生成一个新的字符串对象</p></li><li><p>StringBuffer是线程安全的，StringBuilder是线程不安全的，所以在 单线程环境下StringBuilder效率会更高</p></li></ul><h2 id="x3D-x3D-和equals方法"><a href="#x3D-x3D-和equals方法" class="headerlink" title="&#x3D;&#x3D;和equals方法"></a>&#x3D;&#x3D;和equals方法</h2><ul><li><p>&#x3D;&#x3D;：如果是基本数据类型，比较的是值；如果是引用类型，比较的是引用地址</p></li><li><p>equals：具体看各个类重写equals方法之后的比较逻辑，比如String类，虽然是引用类型，但是String类中重写了equals方法，方法内部比较的是字符串中各个字符是否全部相等</p></li></ul><h2 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h2><ul><li><p>重载（overload）：在一个类中，同名的方法如果有不同的参数列表，则视为重载。</p></li><li><p>重写（override）：子类把父类中的方法重新写一遍</p></li></ul><h2 id="List和Set"><a href="#List和Set" class="headerlink" title="List和Set"></a>List和Set</h2><ul><li><p>List：有序，按对象插入的顺序保存对象，可重复，允许多个Null元素对象，可以使用Iterator取出所有元素，在逐一遍历，还可以使用get（index）获取指定下标元素</p></li><li><p>Set：无序，不可重复，最多允许有一个null元素对象，取元素时只能用Iterator接口取得所有元素，在逐一遍历各个元素</p></li></ul><h2 id="ArrayList和LinkedList"><a href="#ArrayList和LinkedList" class="headerlink" title="ArrayList和LinkedList"></a>ArrayList和LinkedList</h2><table><thead><tr><th align="center">ArrayList</th><th align="center">LinkedList</th></tr></thead><tbody><tr><td align="center">基于数组</td><td align="center">基于链表</td></tr><tr><td align="center">适合随机查找</td><td align="center">适合删除和添加</td></tr><tr><td align="center">都实现了List接口</td><td align="center">额外实现Deque接口，当做队列来使用</td></tr></tbody></table><h2 id="什么时候抛出异常，什么时候捕获异常"><a href="#什么时候抛出异常，什么时候捕获异常" class="headerlink" title="什么时候抛出异常，什么时候捕获异常"></a>什么时候抛出异常，什么时候捕获异常</h2><p>   本方法能否合理的处理该异常，如果处理不了就继续向上抛出异常；</p><p>   包括本方法中在调用另一个方法时，发现出现了异常，如果这个异常应该由自己来处理，那就捕获该异常并进行处理</p><h2 id="怎么确定一个对象到底是不是垃圾？"><a href="#怎么确定一个对象到底是不是垃圾？" class="headerlink" title="怎么确定一个对象到底是不是垃圾？"></a>怎么确定一个对象到底是不是垃圾？</h2><ul><li>引用计数算法：这种方式是给堆内存当中的每个对象记录一个引用个数。引用个数为0的就认为是垃圾。引用计数无法解决循环引用的问题。</li><li>可达性算法：这种方式是在内存中，从根对象向下一值找引用，找到的对象就不是垃圾，没找到的对象就是垃圾。</li></ul><h2 id="JVM有哪些垃圾回收算法"><a href="#JVM有哪些垃圾回收算法" class="headerlink" title="JVM有哪些垃圾回收算法"></a>JVM有哪些垃圾回收算法</h2><ol><li>标记清除法</li><li>标记整理法</li><li>复制法</li></ol><h2 id="线程安全的理解"><a href="#线程安全的理解" class="headerlink" title="线程安全的理解"></a>线程安全的理解</h2><p>   线程安全指的是，我们写的某段代码，在多个线程同时执行时，不会产生混乱，依然能得到正常的结果。</p><h2 id="对守护线程的理解"><a href="#对守护线程的理解" class="headerlink" title="对守护线程的理解"></a>对守护线程的理解</h2><p>   线程分为用户线程和守护线程，用户线程就是普通线程，守护线程就是JVM的后台线程，比如垃圾回收线程就是守护线程，守护线程会在其他普通线程都停止运行之后自动关闭。</p><p>我们可以通过设置thread.setDaemon(true)来把一个线程设置为守护线程</p><h2 id="ThreadLocal的底层原理"><a href="#ThreadLocal的底层原理" class="headerlink" title="ThreadLocal的底层原理"></a>ThreadLocal的底层原理</h2><ol><li>ThreadLocal是JAVA中所提供的线程本地存储机制，可以利用该机制将数据缓存某个线程内部，该线程可以在任意时刻、任意方法中获取缓存的数据</li><li>ThreadLocal底层是通过ThreadLocalMap来实现的，每个Thread对象中都存在一个ThreadLocalMap，Map的key为ThreadLocal对象，Map的value为需要缓存的值</li><li>如果在线程池中使用ThreadLocal会造成内存泄漏，因为当ThreadLocal对象使用完之后，应该要把设置的key，value，也就是Entry对象进行回收，但线程池中的线程不会回收，而线程对象是通过强引用指向ThreadLocalMap，ThreadLocalMap也是通过强引用指向Entry对象，线程不被回收，Entry对象也就不会被回收，从而出现内存泄漏，解决办法是：在使用了ThreadLocal对象之后，手动调用ThreadLocal的remove方法，手动清除Entry对象</li><li>ThreadLocal经典的应用场景就是连接管理（一个线程持有一个连接，该连接对象可以在不同的方法之间进行传递，线程之间不共享同一个连接）</li></ol><h2 id="并发、并行、串行"><a href="#并发、并行、串行" class="headerlink" title="并发、并行、串行"></a>并发、并行、串行</h2><ol><li>串行：一个任务执行完，才能执行下一个任务</li><li>并行：两个任务同时执行</li><li>并发：两个任务整体看上去是同时执行，在底层，两个任务被拆成了很多份，然后一个一个执行，站在更高的角度看来两个任务是同时执行的</li></ol><h2 id="JAVA死锁如何避免"><a href="#JAVA死锁如何避免" class="headerlink" title="JAVA死锁如何避免"></a>JAVA死锁如何避免</h2><ul><li><p>造成原因：</p><ol><li>一个资源每次只能被一个线程使用</li><li>一个线程在阻塞等待某个资源时，不释放已占有资源</li><li>一个线程已经获得的资源，在未使用完之前，不能被强行剥夺</li><li>若干线程形成头尾相接的循环等待资源关系</li></ol></li><li><p>所以要避免死锁，只需要不满足其中一个条件即可。而其中前三个条件作为锁要符合的条件，所以要避免死锁就需要打破第4个条件，不出现循环等待锁的关系</p><p>  在开发过程中：</p><ol><li>要注意加锁顺序，保证每个线程同样的顺序进行加锁</li><li>要注意加锁时间，可以针对锁设置一个超时时间</li><li>要注意死锁检查，这是一种预防机制，确保在第一时间发现死锁并进行解决</li></ol></li></ul><h2 id="线程池的工作原理"><a href="#线程池的工作原理" class="headerlink" title="线程池的工作原理"></a>线程池的工作原理</h2><p>   线程池内部是通过队列+线程实现的，当我们利用线程池执行任务时：</p><ol><li>如果此时线程池中的线程数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务</li><li>如果此时线程池中的线程数量等于corePoolSize，但是缓冲队列workQueue未满，那么任务被放入缓冲队列。</li><li>如果此时线程池中的线程数量大于等于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maximumPoolSize，建新的线程来处理被添加的任务</li><li>如果此时线程池中的线程数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maximumPoolSize，那么通过handler所制定的策略来处理此任务</li><li>当线程池中的线程数量大于corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。这样，线程池可以动态的调整池中的线程数。</li></ol><h2 id="线程池为什么先添加队列而不是先创建最大线程？"><a href="#线程池为什么先添加队列而不是先创建最大线程？" class="headerlink" title="线程池为什么先添加队列而不是先创建最大线程？"></a>线程池为什么先添加队列而不是先创建最大线程？</h2><p>   当线程池中的核心线程都在忙时，如果继续往线程池中添加任务，那么任务会先放入队列，队列满了之后，才会新开线程。</p><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>   缩减代码量，减轻程序员负担</p><p>   控制：</p><ol><li>控制对象的创建</li><li>控制对象内属性的赋值</li></ol><p>   反转：</p><p>   Spring负责创建对象，管理对象，对象之间的依赖关系</p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="Spring中的Bean创建的生命周期有哪些步骤"><a href="#Spring中的Bean创建的生命周期有哪些步骤" class="headerlink" title="Spring中的Bean创建的生命周期有哪些步骤"></a>Spring中的Bean创建的生命周期有哪些步骤</h2><ol><li>推断构造方法</li><li>实例化</li><li>填充属性，也就是依赖注入</li><li>处理Aware回调</li><li>初始化前，处理@PostConstruct注解</li><li>初始化，处理InitializingBean接口</li><li>初始化后，进行AOP</li></ol><h2 id="Spring中Bean是线程安全的吗"><a href="#Spring中Bean是线程安全的吗" class="headerlink" title="Spring中Bean是线程安全的吗"></a>Spring中Bean是线程安全的吗</h2><p>   Spring本身并没有针对Bean做线程安全的处理，所以：</p><ol><li>如果Bean是无状态的，那么Bean是线程安全的</li><li>如果Bean是有状态的，那么Bean不是线程安全的</li></ol><p>   另外：Bean是不是线程安全的，跟Bean的作用域没有关系，Bean的作用域只是表示Bean的生命周期范围，对于任何生命周期的Bean都是一个对象，这个对象是不是线程安全的，还是得看这个Bean对象本身。</p><h2 id="ApplicationContext和BeanFactory有什么区别"><a href="#ApplicationContext和BeanFactory有什么区别" class="headerlink" title="ApplicationContext和BeanFactory有什么区别"></a>ApplicationContext和BeanFactory有什么区别</h2><p>   BeanFactory是Spring中非常核心的组件，表示Bean工厂，可以生成Bean，维护Bean，而ApplicationContext继承了BeanFactory，所以ApplicationContext拥有BeanFactory所有的特点，也是一个Bean工厂，但是ApplicationContext除开继承了BeanFactory之外，还继承了诸如EnvironmentCapable、MessageSource、ApplicationEventPublisher等接口， 从而ApplicationContext还有获取系统环境变量、国际化、时间发布等功能，这是BeanFactory所不具备的</p><h2 id="Spring容器启动流程"><a href="#Spring容器启动流程" class="headerlink" title="Spring容器启动流程"></a>Spring容器启动流程</h2><p>   在创建Spring容器，也就是启动Spring时：</p><ol><li>首先会进行扫描，扫描得到所有的BeanDefinition对象，并存在一个Map中</li><li>然后筛选出非懒加载的单例BeanDefinition进行创建Bean，对于多例Bean不需要在启动过程中去进行创建，对于多例Bean会在每次获取Bean时利用BeanDefinition去创建</li><li>利用BeanDefinition创建Bean就是Bean的创建生命周期，这期间保函了合并BeanDefinition、推断构造方法、实例化、属性填充、初始化前、初始化、初始化后等步骤，其中AOP就是发生在初始化后这一步骤中</li><li>单例Bean创建完之后，Spring会发布一个容器启动事件</li><li>Spring启动结束</li><li>在源码中会更复杂，比如源码中会提供一些模板方法，让子类来实现，比如源码中还设计到一些BeanFactoryPostProcessor和BeanPostProcessor的注册，Spring的扫描就是通过BeanFactoryPostProcessor来实现的，依赖诸如就是通过BeanPostProcessor来实现的</li><li>在Spring启动过程中还会去处理@Import等注解</li></ol><h2 id="Spring中的设计模式"><a href="#Spring中的设计模式" class="headerlink" title="Spring中的设计模式"></a>Spring中的设计模式</h2><ol><li>工厂模式</li><li>原型模式</li><li>单例模式</li><li>构建器模式</li><li>适配器模式</li><li>访问者模式</li><li>装饰器模式</li><li>代理模式</li><li>观察者模式</li><li>策略模式</li><li>模板方法模式</li><li>责任链模式</li></ol><h2 id="Spring-Boot中常用注解"><a href="#Spring-Boot中常用注解" class="headerlink" title="Spring Boot中常用注解"></a>Spring Boot中常用注解</h2><ol><li>@SpringBootApplication注解：这个注解表示了一个SpringBoot工程，它实际上是三个注解的组合：<ol><li>@SpringBootConfiguration：这个注解实际就是一个@Configuration，表示启动类也是一个配置类</li><li>@EnableAutoConfiguration：想Spring容器中导入一个Selector，用来加载ClassPath下SpringFactories中所定义的自动配置类，将这些自动加载为配置Bean</li><li>@ComponentScan：标识扫描路径，因为默认是没有配置实际扫描路径，所以SpringBoot扫描的路径是启动类所在的当前目录</li></ol></li><li>@Bean：用来定义Bean、类似于XML中的<bean>标签，在Spring启动时，会对加了@Bean注解的方法进行解析，将方法的名字作为beanName，并通过执行方法得到bean对象</li><li>@Controller、@Service、@ResponseBody、@Autowired</li></ol><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="Mybatis的优缺点"><a href="#Mybatis的优缺点" class="headerlink" title="Mybatis的优缺点"></a>Mybatis的优缺点</h2><p>   优点：</p><ol><li>基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用</li><li>与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接</li><li>很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）</li><li>能够与Spring很好的集成</li><li>提供映射标签，支持对象与数据库的ORM字段关系映射；提供对象关系映射标签，支持对象关系组件维护</li></ol><p>   缺点：</p><ol><li>SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求</li><li>SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库</li></ol><h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{}和${}的区别"></a>#{}和${}的区别</h2><ol><li>#{}：预编译处理、是占位符；会将sql中的#{}替换为？，调用PreparedStatement来赋值</li><li>${}：字符串替换、是拼接符；就是把${}替换成变量的值，调用Statement来赋值</li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
